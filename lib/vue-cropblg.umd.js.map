{"version":3,"sources":["webpack://vue-cropblg/webpack/universalModuleDefinition","webpack://vue-cropblg/webpack/bootstrap","webpack://vue-cropblg/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://vue-cropblg/./packages/cropblg.vue?a088","webpack://vue-cropblg/packages/cropblg.vue","webpack://vue-cropblg/./packages/cropblg.vue?dc1f","webpack://vue-cropblg/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://vue-cropblg/./packages/cropblg.vue","webpack://vue-cropblg/./packages/index.js","webpack://vue-cropblg/./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"names":["install","Vue","crop","window"],"mappings":"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AFA,CAEA;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AAjBA;;AAmBA;AACA,KAvTA;;AAwTA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AACA;AACA,KA9TA;;AA+TA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,KApUA;;AAqUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,YACA,oBADA;AAAA,YAEA;AACA,oCADA;AAEA;AAFA,OAFA;AAAA,YAMA;AAAA;AAAA;AAAA,sBANA,CADA,CAQA;;AACA;AACA;AACA,KA9VA;;AA+VA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,KAxWA;;AAyWA;AACA;AACA;;AACA;AACA;AACA;AACA,cAHA,CAGA;;AACA,iCAJA,CAKA;;AACA,0GANA,CAOA;;AACA;AACA;AACA;AACA;AAAA,cACA,wCADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA,KApYA;;AAqYA;AACA,6BACA,2BADA,IAEA,YAFA,IAGA,4BAHA;AAIA,KA1YA;;AA2YA;AAAA;AAAA;AAAA;AACA;AAAA,YACA,wBADA;AAEA;AACA;;AACA;AACA;AACA;AACA,OAHA,CAIA;AAJA,WAKA;AACA;AACA;AACA,SAHA,GAIA;AACA;AACA;AACA,SAPA,CAQA;AARA,aASA;AACA;AACA;AACA,WAHA,GAIA;AACA;AACA;AACA,WAPA,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA,eAoBA;AACA;AACA;AACA;AACA;;AACA;AACA,KAxbA;;AAybA;AACA;AAAA,YACA,uBADA;AAEA;AACA,KA7bA;;AA8bA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,KAtcA;;AAucA;AACA;AACA;AAAA,YACA,sBADA;AAAA,YAEA,4BAFA;AAAA,YAGA;AACA;AACA;AACA;AACA,WAFA;AAGA,SALA;;AAMA;AACA;AACA;AACA;AACA,aAFA,EAEA,QAFA;AAGA,WAJA;AAKA;;AAZA,OAHA;AAAA,YAiBA,2BAjBA;AAAA,YAkBA,4BAlBA,CAFA,CAqBA;;AACA;AACA;AACA,iDAFA,CAGA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDACA,WADA,EAEA,+BAFA,EAGA,+BAHA,EAIA,qBAJA,EAKA,sBALA,EAlCA,CAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,+EALA,CAMA;;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AAAA,kBACA,6CADA;AAAA,kBAEA,yCAFA;AAAA,kBAGA,yCAHA;AAIA;AACA;AACA,WAPA;;AAQA;AACA;;AACA;AACA;AACA;AACA;AAAA,gBACA,oCADA;AAAA,gBAEA,kDAFA;AAAA,gBAGA,iDAHA,CAHA,CAOA;;AACA,2DARA,CASA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA,OAvCA;AAwCA,KAhiBA;;AAiiBA;AACA;AACA;AAAA,YACA,qBADA;AAEA;AACA;;AACA;AACA,sBACA,MADA,EAEA,UAFA,EAGA,WAHA,EAIA,KAJA,EAKA,MALA;AAOA,OARA,MAQA;AACA;AACA;;AACA;AACA,KAnjBA;;AAojBA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA,KA5jBA;;AA6jBA;AACA;AACA,6DACA,oCADA,IAEA,iCAFA,IAGA,gCAHA,IAIA,+BAJA,IAKA,8BALA,IAKA,CALA;AAMA;AACA,KAtkBA;;AAukBA;AACA;AACA;AACA,KA1kBA;;AA2kBA;AACA;AACA;AACA;;AACA;AACA,KAhlBA;;AAilBA;AACA,4BADA,CAEA;;AACA;AACA;;AACA;AAAA;AACA;AACA,OAFA;AAGA,KAzlBA;;AA0lBA;AACA;AACA,KA5lBA;;AA6lBA;AACA;AACA;AACA;;AACA;AAAA;AAAA,gBAJA,CAKA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAbA,CAcA;;;AACA;AACA;AACA,qBAjBA,CAkBA;;AACA;AACA;AACA;AACA;AACA;;AApnBA,GAtBA;;AA4oBA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA,kBAHA,CAIA;;AACA;AACA,wBADA;AAEA,0BAFA,CAIA;;AAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAlBA,CAmBA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,6BADA;AAEA;AAFA;AAIA;;AAzqBA,G;;ACxBkT,CAAgB,4GAAG,EAAC,C;;ACAtU;;AAEA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AC5FsF;AAC3B;AACL;;;AAGtD;AACuF;AACvF,gBAAgB,kBAAU;AAC1B,EAAE,wCAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,6D;;CCff;AAEA;;AACA,MAAMA,OAAO,GAAG,eAAe;AAC3B,MAAIA,OAAO,CAAX,WAAuB;AACvBA,SAAO,CAAPA,YAF2B,IAE3BA,CAF2B,CAG3B;AACA;;AACIC,KAAG,CAAHA,UAAcC,OAAI,CAAlBD,MALuB,OAKvBA,EALuB,CAM3B;AANJ,E,CASA;;;AACA,IAAI,iCAAiCE,MAAM,CAA3C,KAAiD;AAC7CH,SAAO,CAACG,MAAM,CAAdH,GAAO,CAAPA;AACH;;AACc;AAAA;AAEXE,eAAIA;AAFO,CAAf;;;ACnBA;AAAwB;AACA;AACT,yFAAG;AACI","file":"vue-cropblg.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-cropblg\"] = factory();\n\telse\n\t\troot[\"vue-cropblg\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"mountNode\",staticClass:\"mount-node\",staticStyle:{\"overflow\":\"hidden\"},on:{\"touchstart\":function($event){return _vm.handleStart($event)},\"touchmove\":function($event){return _vm.handleMove($event)}}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.noImage),expression:\"noImage\"}],staticClass:\"no-image-file\",staticStyle:{\"height\":\"100%\",\"display\":\"flex\",\"justify-content\":\"center\",\"align-items\":\"center\",\"flex-wrap\":\"wrap\"},on:{\"click\":_vm.inputHandle,\"touchstart\":function($event){$event.stopPropagation();return (function (){})($event)},\"touchmove\":function($event){$event.stopPropagation();return (function (){})($event)}}},[_vm._t(\"placeholder\",[_c('span',[_vm._v(\"暂时没有图片,请选择图像\")])]),_c('div',{staticStyle:{\"display\":\"none\"}},[_c('input',{attrs:{\"type\":\"file\",\"id\":\"file-input\",\"accept\":\"image/jpeg,image/x-icon,image/png\"},on:{\"change\":_vm.uploadImg}}),_vm._t(\"defaultImgUrl\")],2)],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div ref=\"mountNode\" \r\n        class=\"mount-node\" \r\n        @touchstart=\"handleStart($event)\"\r\n        @touchmove=\"handleMove($event)\"\r\n        style=\" overflow: hidden;\"\r\n    >\r\n    <!--  不能绑在wrap 上=== 这样子任何点击都会计算 -后期优化-->\r\n        <div v-show=\"noImage\" @click=\"inputHandle\" class=\"no-image-file\" style=\"height: 100%; display: flex;justify-content: center;align-items: center;flex-wrap: wrap;\"  @touchstart.stop=\"()=>{}\" @touchmove.stop=\"()=>{}\">\r\n            <!-- <span>暂时没有图片,请选择图像</span> -->\r\n            <slot name=\"placeholder\"><span>暂时没有图片,请选择图像</span></slot>\r\n            <div style=\"display:none\">\r\n                <input \r\n                    @change=\"uploadImg\"\r\n                    type=\"file\"\r\n                    id=\"file-input\"\r\n                    accept=\"image/jpeg,image/x-icon,image/png\"\r\n                >\r\n                <slot name=\"defaultImgUrl\"></slot>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'crop',\r\n        props:['value', 'position', 'textWatermark', 'imageWatermark', 'defaultImgUrl', 'color', 'angle'],\r\n        data() {\r\n            return {\r\n                // ready: false,\r\n                noImage: true,\r\n                ctx: null,\r\n                options: null,\r\n                pixelRatio: null,\r\n                scale:1,\r\n                canvas: null,\r\n                image: {},\r\n                points: [],\r\n                lines: [],\r\n                cropper: {},\r\n                startPoint: {},\r\n                touchBar: {},\r\n                nookSide: 30,\r\n                rotateAngle: 0\r\n            }\r\n        },\r\n        methods: {\r\n            animation(img){\r\n                if (img) {\r\n                    const clientW = img.width,\r\n                    clientH = img.height;\r\n                    const { width, height } = this.options\r\n                    let currentW = clientW,\r\n                        currentH = clientH,\r\n                        k = 1; // contain 时的缩放比\r\n                    // contain 图片\r\n                    if (clientW > width) {\r\n                        currentW = width\r\n                        k = currentW / clientW\r\n                        currentH = k * clientH\r\n                    }\r\n                    if (currentH > height) {\r\n                        currentH = height;\r\n                        k = currentH / clientH\r\n                        currentW = k * clientW\r\n                    }\r\n                    // 针对小图片\r\n                    const minNum = 100\r\n                    if (clientW < minNum) {\r\n                        currentW = minNum\r\n                        k = currentW / clientW\r\n                        currentH = k * clientH\r\n                    }\r\n                    if (currentH < minNum) {\r\n                        currentH = minNum;\r\n                        k = currentH / clientH\r\n                        currentW = k * clientW\r\n                    }\r\n                    // 针对小图片\r\n                    this.image = {\r\n                        element: img,\r\n                        width: currentW,\r\n                        height: currentH,\r\n                        x: (width - currentW) / 2,\r\n                        y: (height - currentH) / 2,\r\n                        clientWidth: clientW,\r\n                        clientHeight: clientH\r\n                    }\r\n                    this.cropper = {\r\n                        x: (width - currentW / 2) / 2,\r\n                        y: (height - currentH / 2) / 2,\r\n                        width: currentW  / 2,\r\n                        height: currentH / 2\r\n                    }\r\n                    this.touchBar = {\r\n                        x: width - 60 - 14,\r\n                        y: 10,\r\n                        width: 60,\r\n                        height: 60\r\n                    }\r\n                    this.scale = k\r\n                    this.draw()\r\n                }\r\n            },\r\n            draw() {\r\n                const { width, height } = this.options\r\n                // 避免预览到背景\r\n                this.ctx.clearRect(0, 0, width, height)\r\n                // console.time('fillBackground')  \r\n                this.fillBackground()\r\n                // console.timeEnd('fillBackground')\r\n                // console.time('fillImage')\r\n                this.fillImage()\r\n                if (!this.averageColor) {\r\n                   this.averageColor = this.getImageColor(this.ctx.getImageData(this.cropper.x,  this.cropper.y, 50, 50).data)\r\n                }\r\n                // console.timeEnd('fillImage')\r\n                // console.time('updatePoint')\r\n                this.updatePoint()\r\n                // console.timeEnd('updatePoint')\r\n                //  console.time('fillCropper')\r\n                this.fillCropper()\r\n                // console.timeEnd('fillCropper')\r\n                //  console.time('drawTouchBar')\r\n                 if (this.angle) {\r\n                     this.drawTouchBar()\r\n                 }\r\n                // console.timeEnd('drawTouchBar')\r\n                // this.preview()\r\n            },\r\n            drawTouchBar() {\r\n                const ctx = this.ctx,\r\n                touchBar = this.touchBar,\r\n                color = this.color || this.averageColor,\r\n                x = touchBar.x + touchBar.width * 0.6,\r\n                y =  touchBar.y + touchBar.height * 0.64,\r\n                r = touchBar.width * 0.41,\r\n                alpha = 6,\r\n                h1 = touchBar.width * 0.1,\r\n                h2 =  touchBar.width * 0.18\r\n                ctx.lineWidth = 2\r\n                // ctx.fillStyle = '#000';\r\n                // ctx.fillRect(touchBar.x, touchBar.y, touchBar.width, touchBar.height)\r\n                ctx.fillStyle = color\r\n                ctx.fillRect(x - touchBar.width / 6, y - touchBar.height / 6, touchBar.width * 0.43, touchBar.height * 0.43)\r\n                ctx.strokeStyle = color\r\n                ctx.beginPath()\r\n                ctx.arc(x, y, r, Math.PI/180 * 180, -Math.PI/2 + alpha, false)\r\n                ctx.stroke()\r\n                if(alpha < 2*Math.PI) {\r\n                    const x1 = x + (r - h1) * Math.sin(alpha),\r\n                    y1 = y - (r - h1) * Math.cos(alpha),\r\n                    x2 = x + (r + h1) * Math.sin(alpha),\r\n                    y2 = y - (r + h1) * Math.cos(alpha),\r\n                    x0 = (x1 + x2) / 2 + h2 * Math.sin(alpha + Math.PI/2),\r\n                    y0 = (y1 + y2) / 2 - h2 * Math.cos(alpha + Math.PI/2)\r\n                    ctx.beginPath()\r\n                    ctx.moveTo(x0, y0)\r\n                    ctx.lineTo(x1, y1)\r\n                    ctx.lineTo(x2, y2)\r\n                    ctx.fill()\r\n                }\r\n            },\r\n            fillImage() {\r\n                const image = this.image;\r\n                const ctx = this.ctx\r\n                const rotateAngle = this.rotateAngle || 0\r\n                this.canvasRotate('img', ctx, image.element, rotateAngle, image.x, image.y, image.width, image.height)\r\n                // ctx.drawImage(image.element, image.x, image.y, image.width, image.height)\r\n            },\r\n            updatePoint() {\r\n                // 点中点和线 不用 执行 \r\n                const c = this.cropper;\r\n                const nookSide =  this.nookSide,\r\n                cWidth = c.x + c.width,\r\n                cHeight = c.y + c.height,\r\n                forecastX = cWidth - nookSide,\r\n                forecastY = cHeight - nookSide\r\n                this.points = [\r\n                    {\r\n                        x: c.x,\r\n                        y: c.y,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: 0,\r\n                        diffY: 0\r\n                    },\r\n                    {\r\n                        x: forecastX ,\r\n                        y: c.y,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: nookSide,\r\n                        diffY: 0\r\n                    },\r\n                    {\r\n                        x: forecastX ,\r\n                        y: forecastY,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: nookSide,\r\n                        diffY: nookSide\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: forecastY,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: 0,\r\n                        diffY: nookSide\r\n                    }\r\n                ]\r\n                // 寻找四根线\r\n                const lineHeight = nookSide / .7 / 2,\r\n                halfLineHeight = lineHeight / 2\r\n                this.lines = [\r\n                     {\r\n                        x: c.x,\r\n                        y: c.y - halfLineHeight,\r\n                        width: c.width,\r\n                        height: lineHeight\r\n                    },\r\n                    {\r\n                        x: cWidth - halfLineHeight,\r\n                        y: c.y,\r\n                        width: lineHeight,\r\n                        height: c.height\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: cHeight - halfLineHeight,\r\n                        width: c.width,\r\n                        height: lineHeight\r\n                    },\r\n                    {\r\n                        x: c.x - halfLineHeight,\r\n                        y: c.y,\r\n                        width: lineHeight,\r\n                        height: c.height\r\n                    }\r\n                ]\r\n            },\r\n            fillCropper() {\r\n                const ctx = this.ctx,\r\n                cropper = this.cropper,\r\n                points = this.points,\r\n                color = this.color || this.averageColor\r\n                ctx.strokeStyle = color\r\n                ctx.lineWidth = 2\r\n                ctx.strokeRect(cropper.x, cropper.y, cropper.width, cropper.height)\r\n                ctx.fillStyle = color\r\n                const nookSide = this.nookSide / 8\r\n                points.forEach((element, index) => {\r\n                    ctx.save()\r\n                    ctx.translate(element.x + element.diffX, element.y + element.diffY)\r\n                    ctx.rotate(index * 90 * (Math.PI/180))\r\n                    ctx.fillRect(-nookSide, -nookSide, element.height, nookSide * 2)\r\n                    ctx.fillRect(-nookSide, -nookSide, nookSide * 2, element.width)\r\n                    // if(index % 2 === 0){\r\n                    //     ctx.fillRect(-nookSide, cropper.height / 2 - element.nookSide , element.nookSide / 4, element.nookSide * 2)\r\n                    // } else {\r\n                    //     ctx.fillRect(-nookSide, cropper.width / 2 - element.nookSide, element.nookSide / 4, element.nookSide * 2)\r\n                    // }\r\n                    ctx.restore()\r\n                });\r\n               \r\n\r\n            },\r\n           // 填充背景\r\n            fillBackground() {\r\n                // 多个变量可以用逗号 一次赋值\r\n                const { width, height } = this.options\r\n                const ctx = this.ctx,\r\n                side = 30 ,//width / 80,\r\n                x = Math.ceil(width / side),\r\n                y = Math.ceil(height / side)\r\n                // Math.ceil 向上取整\r\n                ctx.save()\r\n                ctx.fillStyle = '#ccc'\r\n                // y方向\r\n                for (let i = 0; i < y; i++) {//  铺满每一行\r\n                    for (let j = 0; j < x; j++) { // 一行的小方格\r\n                        if ((j + i) % 2 === 0) {\r\n                            ctx.fillRect(j * side, i * side, side, side)\r\n                        }\r\n                    }\r\n                }\r\n                //蒙层 \r\n                ctx.fillStyle = 'rgba(0, 0, 0, .1)'\r\n                ctx.fillRect(0, 0, width, height)\r\n                 //蒙层 \r\n                ctx.restore()\r\n            },\r\n            getNewCropper(touchX, touchY ,cropper) {\r\n               return {\r\n                    cropperWidth:(cropper.x + cropper.width) - touchX,\r\n                    cropperHeight: (cropper.y + cropper.height) - touchY,\r\n                    cropperX: touchX - cropper.x,\r\n                    cropperY: touchY - cropper.y\r\n               }\r\n            },\r\n            handlePointMove({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {},\r\n                { cropperWidth, cropperHeight, cropperX, cropperY } = this.getNewCropper(x, y, cropper)\r\n                switch (this.index) {\r\n                    case 0:\r\n                        newCropper.width =  cropperWidth\r\n                        newCropper.height = cropperHeight\r\n                        newCropper.x = x\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 1:\r\n                    // x  不会动\r\n                        newCropper.width =  cropperX\r\n                        newCropper.height =  cropperHeight\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 3:\r\n                    // y 不会动\r\n                        newCropper.width = cropperWidth\r\n                        newCropper.height = cropperY\r\n                        newCropper.x = x\r\n                        break;\r\n                    case 2:\r\n                        newCropper.width = cropperX\r\n                        newCropper.height = cropperY\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.renderCropper(newCropper)\r\n            },\r\n            handleLineMove ({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {},\r\n                { cropperWidth, cropperHeight, cropperX, cropperY } = this.getNewCropper(x, y, cropper)\r\n                switch (this.index) {\r\n                    case 3:\r\n                        newCropper.width = cropperWidth\r\n                        newCropper.x = x // 限制\r\n                        break;\r\n                    case 0:\r\n                        newCropper.height = cropperHeight\r\n                        newCropper.y = y // 限制\r\n                        break;\r\n                    case 1:\r\n                        newCropper.width = cropperX\r\n                        break;\r\n                    case 2:\r\n                    // y 不会动\r\n                        newCropper.height = cropperY\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.renderCropper(newCropper)\r\n            },\r\n            renderCropper(newCropper) {\r\n                 if (newCropper.width <= this.nookSide * 4 || newCropper.height <= this.nookSide * 4) {\r\n                    return\r\n                }\r\n                this.cropper = {...this.cropper,...newCropper}\r\n                this.draw()\r\n            },\r\n            handleImageMove ({ x, y }) {\r\n                const s = this.startPoint\r\n                this.image.x = x - s.offsetX\r\n                this.image.y = y - s.offsetY\r\n                this.draw()\r\n            },\r\n            // handleCropperMove({ x, y }) {\r\n            //     const { width, height } = this.options;\r\n            //     const s = this.startPoint;\r\n            //     const oX = s.offsetX;\r\n            //     const oY = s.offsetY;\r\n            //     const maxX = width - this.cropper.width;\r\n            //     const maxY = height - this.cropper.height;\r\n            //     let currentX = x - oX,\r\n            //     currentY = y - oY;\r\n            //     // 判断边界\r\n            //     this.cropper.x = this.limit(currentX, 0, maxX)\r\n            //     this.cropper.y = this.limit(currentY, 0, maxY)\r\n            //     this.draw()\r\n            // },\r\n            getCoordinateByEvent(e){\r\n                const rect = e.target.getBoundingClientRect(),\r\n                touch = e.touches[0],\r\n                coordinate = {\r\n                    x: touch.clientX - rect.left,\r\n                    y: touch.clientY - rect.top\r\n                },\r\n                { width, height } = this.options\r\n                // move 到边\r\n                if (coordinate.x <= 2 || coordinate.y <= 2 || coordinate.x >= width - 2 || coordinate.y >= height - 2) return\r\n                return coordinate\r\n            },\r\n            // https://blog.csdn.net/qq_42014697/article/details/80728463  两指缩放\r\n            handleStart(e) {\r\n                e.preventDefault()\r\n                if (e.touches.length > 1) {\r\n                    this.startTouches = e.touches\r\n                    this.startPoint.type = null\r\n                    return;\r\n                }\r\n                this.startPoint = this.getPointByCoordinate(this.getCoordinateByEvent(e))\r\n            },\r\n            handleMove (e) {\r\n                e.preventDefault()\r\n                const touches = e.touches\r\n                if (touches.length > 1) {\r\n                    const image = this.image\r\n                    let startTouches = this.startTouches\r\n                    let k; // 最终的缩放系数\r\n                    const scale = this.scale;\r\n                    // const offset = e.deltaY / 800;\r\n                    k = (this.getDistance(touches[0], touches[1]) / this.getDistance(startTouches[0], startTouches[1]))\r\n                    // k = k < 1 ? k / 10 : k * 10\r\n                    k = k < 1 ? 1 / (1 + k / 80) : 1 + Math.abs(k) / 160\r\n                    k = k * scale;\r\n                    this.scale = this.limit(k, 0.02, 4)\r\n                    const width = image.clientWidth * this.scale,\r\n                    height = image.clientHeight * this.scale\r\n                    this.image.x += (image.width - width) / 2\r\n                    this.image.y += (image.height - height) / 2\r\n                    this.image.width = width\r\n                    this.image.height = height\r\n                    this.draw()\r\n                    return\r\n                }\r\n                const type = this.startPoint.type\r\n                if (type && this.getCoordinateByEvent(e)) {\r\n                    this[type](this.getCoordinateByEvent(e))\r\n                }\r\n            },\r\n            checkRegion(x,y,target) {\r\n                return x > target.x &&\r\n                    x < target.x + target.width &&\r\n                    y > target.y &&\r\n                    y < target.y + target.height\r\n            },\r\n            getPointByCoordinate({x, y}) {\r\n                const image = this.image,\r\n                touchBar = this.touchBar\r\n                let t = {}\r\n                let index = 0\r\n                if (this.checkRegion(x,y,touchBar)) {\r\n                    this.rotateAngle =  (this.rotateAngle + this.angle ) % 360\r\n                    this.draw()\r\n                }  \r\n                // 四个角移动         \r\n                else if (this.points.some((point,i) => {\r\n                    index = i\r\n                    return this.checkRegion(x,y,point)\r\n                })\r\n                ) {\r\n                    t.type = 'handlePointMove'\r\n                    this.index = index\r\n                }\r\n                // 四根线移动\r\n                else if (this.lines.some((line,i) => {\r\n                    index = i\r\n                    return this.checkRegion(x,y,line)\r\n                }) \r\n                ) {\r\n                    t.type = 'handleLineMove'\r\n                    this.index = index\r\n                }\r\n                // else if (\r\n                // cropper &&\r\n                // x > cropper.x &&\r\n                // x < cropper.x + cropper.width &&\r\n                // y > cropper.y &&\r\n                // y < cropper.y + cropper.height\r\n                // ) {\r\n                // t.offsetX = x - cropper.x;\r\n                // t.offsetY = y - cropper.y;\r\n                // t.type = 'handleCropperMove'\r\n                // }\r\n                // 图片移动\r\n                else if (this.checkRegion(x,y,image)) {\r\n                    t.offsetX = x - image.x\r\n                    t.offsetY = y - image.y\r\n                    t.type = 'handleImageMove'\r\n                }\r\n                return t\r\n            },\r\n            getDistance(p1, p2) {\r\n                const x = p2.pageX - p1.pageX,\r\n                    y = p2.pageY - p1.pageY\r\n                return Math.sqrt((x * x) + (y * y))\r\n            },\r\n            limit(value, min, max) {\r\n                if (value < min) {\r\n                    return min\r\n                }\r\n                if (value > max) {\r\n                    return max\r\n                }\r\n                return value\r\n            },\r\n            getImage(type='Base64', mimeType='image/jpeg', quality=1) {\r\n                if (this.noImage) return\r\n                const image = this.image,\r\n                cropper = this.cropper,\r\n                pixelRatio = this.pixelRatio,\r\n                types = {\r\n                    Base64(canvas, mimeType) {\r\n                        return new Promise((resolve) => {\r\n                            resolve(canvas.toDataURL(mimeType))\r\n                        })\r\n                    },\r\n                    Blob(canvas, mimeType){\r\n                        return new Promise((resolve) => {\r\n                            canvas.toBlob((blob)=> {\r\n                                resolve(blob)\r\n                            }, mimeType)\r\n                        })\r\n                    } \r\n                },\r\n                w = cropper.width * quality ,\r\n                h = cropper.height * quality \r\n                // 变量申请\r\n                if (!this.canvas) {\r\n                    this.canvas = document.createElement('canvas')\r\n                    this.cCtx = this.canvas.getContext('2d')\r\n                    // const { mountNode } = this.$refs\r\n                    // mountNode.appendChild(this.canvas)\r\n                }\r\n                const cCtx = this.cCtx\r\n                this.canvas.width = w * pixelRatio\r\n                this.canvas.height = h * pixelRatio\r\n                cCtx.scale(pixelRatio, pixelRatio)\r\n                cCtx.clearRect(0, 0, w, h)\r\n                const rotateAngle = this.rotateAngle || 0\r\n                this.canvasRotate('img', cCtx, image.element,\r\n                    rotateAngle,\r\n                    (image.x - cropper.x)  * quality,\r\n                    (image.y - cropper.y)  * quality,\r\n                    image.width* quality,\r\n                    image.height* quality\r\n                )\r\n                // -------------\r\n                // cCtx.drawImage(\r\n                //     image.element,\r\n                //     (image.x - cropper.x)  * quality , //  是负数\r\n                //     (image.y - cropper.y)  * quality, // 负数\r\n                //     image.width * quality ,\r\n                //     image.height * quality\r\n                // )\r\n                return new Promise((resolve, reject) => {\r\n                    if(!types[type]) {\r\n                        reject('type = Blob || Base64')\r\n                        return  \r\n                    }\r\n                    const [left = '50%', top = '50%', size = 1, angle = 0] = this.position\r\n                    // angle = this.angle || 0\r\n                    if (this.imageWatermark) {\r\n                        let watermarkImg = new Image()\r\n                        watermarkImg.src = this.getFileSrc(this.imageWatermark)\r\n                        watermarkImg.crossOrigin = 'anonymous'\r\n                        watermarkImg.onload = () => { // 等到图片加载进来之后\r\n                            const width = watermarkImg.width * size * quality,\r\n                            height = watermarkImg.height * size * quality,\r\n                            imgX  = ( w - width ) * parseInt(left) / 100 ,\r\n                            imgY =  (h - height) * parseInt(top) / 100\r\n                            this.canvasRotate('img', cCtx, watermarkImg, angle, imgX, imgY, width, height)\r\n                            resolve(types[type](this.canvas, mimeType))\r\n                        }\r\n                        return\r\n                    }             \r\n                    if (this.textWatermark) {\r\n                        const height = this.limit(12 * size, 12, 100)\r\n                        cCtx.font = height + 'px Georgia'\r\n                        const text = this.textWatermark,\r\n                        width = cCtx.measureText(text).width,\r\n                        textX = (w - width * 1.031 )  * parseInt(left) / 100,\r\n                        textY = (h - height * 2.82)  * parseInt(top) / 100\r\n                        // 变量申请\r\n                        cCtx.fillStyle = this.color || this.averageColor\r\n                        // console.log(this.cCtx.fillStyle)\r\n                        if(cCtx.fillStyle === '#ffffff') {\r\n                            cCtx.fillStyle = '#000'\r\n                        }\r\n                        this.canvasRotate('text', cCtx, text, angle, textX, textY, width, height)\r\n                        resolve(types[type](this.canvas, mimeType))\r\n                        return\r\n                    }\r\n                    resolve(types[type](this.canvas, mimeType))\r\n                })\r\n            },\r\n            canvasRotate(type, ctx, target, angle, x, y, width,height) {\r\n                ctx.save()\r\n                const halfHeight = height / 2,\r\n                halfWidth = width / 2\r\n                ctx.translate(x + halfWidth, y + halfHeight)\r\n                ctx.rotate(Math.PI / 180 * angle)\r\n                if (type === 'img') {\r\n                    ctx.drawImage(\r\n                        target,\r\n                        -halfWidth,\r\n                        -halfHeight,\r\n                        width,\r\n                        height\r\n                    )\r\n                } else {\r\n                    ctx.fillText(target, -halfWidth , -halfHeight)\r\n                }\r\n                ctx.restore()\r\n            },\r\n            changeImage(imgAddress) {\r\n                if (this.noImage) return\r\n                this.averageColor = null\r\n                if (imgAddress) {\r\n                    this.createImage(imgAddress)\r\n                    return\r\n                }\r\n                this.inputHandle()\r\n            },\r\n            // 工具\r\n            getPixelRatio(context) {\r\n                const backingStore = context.backingStorePixelRatio ||\r\n                context.webkitBackingStorePixelRatio ||\r\n                context.mozBackingStorePixelRatio ||\r\n                context.msBackingStorePixelRatio ||\r\n                context.oBackingStorePixelRatio ||\r\n                context.backingStorePixelRatio || 1\r\n                return (window.devicePixelRatio || 1) / backingStore\r\n            },\r\n            uploadImg(e) {\r\n                this.createImage(e.target.files[0])\r\n                this.noImage = false\r\n            },\r\n            getFileSrc(src) {\r\n                if (Object.prototype.toString.call(src) === '[object File]') {\r\n                   src = window.URL.createObjectURL(src)\r\n                }\r\n                return src\r\n            },\r\n            createImage(imgfile) {\r\n                let img = new Image()\r\n                //  url , imgsrc, 文件  三种情况\r\n                img.crossOrigin = 'anonymous'\r\n                img.src = this.getFileSrc(imgfile)\r\n                img.onload = () => { // 等到图片加载进来之后\r\n                    this.animation(img)\r\n                }\r\n            },\r\n            inputHandle() {\r\n                document.getElementById('file-input').click()\r\n            },\r\n            getImageColor(data) { \r\n                if (this.color) {\r\n                    return this.color\r\n                }\r\n                let r=0, g=0, b=0\r\n                // 取所有像素的平均值\r\n                const num = 50\r\n                for (var row = 0; row < num; row++) {\r\n                    for (var col = 0; col < num; col++) {\r\n                        r += data[((num * row) + col) * 4];\r\n                        g += data[((num * row) + col) * 4 + 1];\r\n                        b += data[((num * row) + col) * 4 + 2];\r\n                    }\r\n                }\r\n                // 求取平均值\r\n                r /= (num * num);\r\n                g /= (num * num);\r\n                b /= (num * num);\r\n                // 将最终的值取整\r\n                r = Math.round(r);\r\n                g = Math.round(g);\r\n                b = Math.round(b);\r\n                return `rgba(${255 - r}, ${255 - g}, ${255 - b}, 1)`\r\n            }\r\n        },\r\n        mounted() {\r\n            // 解决 字体模糊\r\n            const { mountNode } = this.$refs\r\n            const { clientWidth, clientHeight } = mountNode\r\n            // p可以优化\r\n            this.options = {\r\n                width: clientWidth,\r\n                height: clientHeight\r\n            }\r\n            // canvas dom\r\n            let canvasDom =  document.createElement('canvas')\r\n            canvasDom.style.width =  clientWidth + 'px'\r\n            canvasDom.style.height = clientHeight + 'px'\r\n            mountNode.appendChild(canvasDom)\r\n            this.ctx = canvasDom.getContext('2d')\r\n            const pixelRatio = this.pixelRatio = this.getPixelRatio(this.ctx)\r\n            canvasDom.width = clientWidth * pixelRatio\r\n            canvasDom.height = clientHeight * pixelRatio\r\n            this.ctx.scale(pixelRatio, pixelRatio)\r\n            // console.log(this.$slots.initial[0].data.attrs.src)\r\n            if (this.defaultImgUrl || this.$slots.defaultImgUrl) {\r\n                const src = this.defaultImgUrl ? this.defaultImgUrl : this.$slots.defaultImgUrl[0].data.attrs.src\r\n                this.createImage(src)\r\n                this.noImage = false\r\n            }\r\n            this.$emit('input', {\r\n                getImage: this.getImage,\r\n                changeImage: this.changeImage\r\n            })           \r\n        }\r\n    }\r\n</script>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","import { render, staticRenderFns } from \"./cropblg.vue?vue&type=template&id=53190108&\"\nimport script from \"./cropblg.vue?vue&type=script&lang=js&\"\nexport * from \"./cropblg.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\r\nimport crop from './cropblg.vue';\r\n\r\n// const components = [progresschart];\r\n\r\n// 定义 install 方法\r\nconst install = function (Vue) {\r\n    if (install.installed) return\r\n    install.installed = true\r\n    // 遍历并注册全局组件\r\n    // components.map(component => {\r\n        Vue.component(crop.name, crop)\r\n    // })\r\n}\r\n\r\n//  全局引用可自动安装\r\nif (typeof window !== 'undefined' && window.Vue) {\r\n    install(window.Vue);\r\n}\r\nexport default {\r\n    install,\r\n    crop\r\n};\r\nexport { crop };","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}