{"version":3,"sources":["webpack://vue-cropblg/webpack/universalModuleDefinition","webpack://vue-cropblg/webpack/bootstrap","webpack://vue-cropblg/./node_modules/current-script-polyfill/currentScript.js","webpack://vue-cropblg/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://vue-cropblg/./packages/cropblg.vue?4619","webpack://vue-cropblg/./packages/util.js","webpack://vue-cropblg/packages/cropblg.vue","webpack://vue-cropblg/./packages/cropblg.vue?0b4c","webpack://vue-cropblg/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://vue-cropblg/./packages/cropblg.vue","webpack://vue-cropblg/./packages/index.js","webpack://vue-cropblg/./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"names":["getImageDirection","getImageData","orientation","getOrientation","reslove","reject","data","img","base64ToArrayBuffer","http","base64","binary","atob","len","buffer","view","i","str","length","String","dataView","offset","app1Start","exifIDCode","tiffOffset","getStringFromCharCode","endianness","littleEndian","firstIFDOffset","ifdStart","x","y","width","height","canvas","document","ctx","Math","install","Vue","crop","window"],"mappings":"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AACA;AACA;AACA,sBADA;AAEA,sBAFA;AAGA;AAHA;AAKA;AACA,qCADA;AAEA,sCAFA;AAGA,2BAHA;AAIA;AAJA;AAOA,uBArDA,CAqDA;;AACA,qBAtDA,CAsDA;AAEA;;AACA;AACA;AACA;;AACA;AACA;AACA,2BADA;AAEA,eAFA;AAGA,mBAHA;AAIA;AAJA;AAMA;AACA,OApEA,CAqEA;;;AACA;AACA;AACA,2BADA;AAEA,0CAFA;AAGA,mBAHA;AAIA;AAJA;AAMA;AACA;;AACA;AACA;AACA,2BADA;AAEA,0CAFA;AAGA,mBAHA;AAIA;AAJA;AAMA;AACA;;AACA;AACA,KA1FA;AA2FA,QA3FA,kBA2FA;AAAA,2BACA,YADA;AAAA,UACA,KADA,kBACA,KADA;AAAA,UACA,MADA,kBACA,MADA;AAAA,UAEA,KAFA,GAEA,oBAFA,EAGA;;AACA,8CAJA,CAKA;;AACA,4BANA,CAOA;;AACA,uBARA,CASA;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA,OAnBA,CAoBA;;;AACA;AACA;AACA,yCAvBA,CAwBA;AACA;AACA;AACA,KAtHA;AAuHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eA9HA,uBA8HA,GA9HA,EA8HA;AAAA;;AAAA;AAAA;AAAA;AACA,qCADA,CAEA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAHA,MAGA;AACA;AACA;AACA;;AACA;AACA;AACA,aAFA,MAEA;AACA;AACA;AACA,WAfA;AAgBA;AACA,SAxBA;AAyBA,OA7BA,CA8BA;;AACA,KA7JA;AA8JA,kBA9JA,0BA8JA,QA9JA,EA8JA;AACA;AADA,UAEA,CAFA,GAEA,QAFA,CAEA,CAFA;AAAA,UAEA,CAFA,GAEA,QAFA,CAEA,CAFA;AAGA;AAAA,UACA;AACA,6CAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAbA,CAcA;;AACA;;AACA;AACA;AACA;AACA,OAnBA,CAoBA;;;AACA;AACA;AACA;AACA,KAtLA;AAuLA,iBAvLA,yBAuLA,QAvLA,EAuLA;AACA;AADA,UAEA,CAFA,GAEA,QAFA,CAEA,CAFA;AAAA,UAEA,CAFA,GAEA,QAFA,CAEA,CAFA,EAGA;;AACA;AAAA,UACA;AACA,6CAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAhNA;AAiNA,gBAjNA,wBAiNA,QAjNA,EAiNA;AACA;AACA;AAAA,UACA,uCADA;AAAA,UAEA,qCAFA;AAAA,UAGA,uCAHA;AAAA,UAIA,yBAJA;AAAA,UAKA,SALA;AAAA,UAMA,yBANA;AAAA,UAOA,0BAPA;AAQA,wBAVA,CAWA;;AACA,4BAZA,CAaA;;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA,YACA,mCADA;AAAA,YAEA,mCAFA;AAAA,YAGA,mCAHA;AAAA,YAIA,uDAJA;AAAA,YAKA,uDALA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA,KAhPA;AAiPA,aAjPA,uBAiPA;AACA;AACA;AACA;AACA,6GAJA,CAKA;AACA,KAvPA;AAwPA,eAxPA,yBAwPA;AACA;AACA;AAAA,UACA,wBADA;AAAA,UAEA,sBAFA;AAAA,UAGA,wBAHA;AAAA,UAIA,6BAJA;AAAA,UAKA,8BALA;AAMA,qBACA;AACA,cADA;AAEA,cAFA;AAGA,uBAHA;AAIA,wBAJA;AAKA,gBALA;AAMA;AANA,OADA,EASA;AACA,oBADA;AAEA,cAFA;AAGA,uBAHA;AAIA,wBAJA;AAKA,uBALA;AAMA;AANA,OATA,EAiBA;AACA,oBADA;AAEA,oBAFA;AAGA,uBAHA;AAIA,wBAJA;AAKA,uBALA;AAMA;AANA,OAjBA,EAyBA;AACA,cADA;AAEA,oBAFA;AAGA,uBAHA;AAIA,wBAJA;AAKA,gBALA;AAMA;AANA,OAzBA,EARA,CA0CA;;AACA;AAAA,UACA,+BADA;AAEA,oBACA;AACA,cADA;AAEA,+BAFA;AAGA,sBAHA;AAIA;AAJA,OADA,EAOA;AACA,kCADA;AAEA,cAFA;AAGA,yBAHA;AAIA;AAJA,OAPA,EAaA;AACA,cADA;AAEA,mCAFA;AAGA,sBAHA;AAIA;AAJA,OAbA,EAmBA;AACA,+BADA;AAEA,cAFA;AAGA,yBAHA;AAIA;AAJA,OAnBA;AA0BA,KA/TA;AAgUA,mBAhUA,6BAgUA;AACA;AAAA,UACA,sBADA;AAAA,UAEA,oBAFA;AAAA,UAGA,uCAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEALA,CAMA;AACA;AACA;AACA;AACA;;AACA;AACA,OAZA,EAVA,CAuBA;AACA;AAGA,KA3VA;AA4VA,kBA5VA,4BA4VA;AACA;AACA;AACA;AACA,wBAJA,CAIA;;AACA;AACA;AACA,KAnWA;AAoWA,iBApWA,+BAoWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,KAvWA;AAwWA;AACA,kBAzWA,4BAyWA;AACA;AADA,2BAEA,YAFA;AAAA,UAEA,KAFA,kBAEA,KAFA;AAAA,UAEA,MAFA,kBAEA,MAFA;AAAA,UAGA,GAHA,GAGA,QAHA;AAIA;AACA;AACA;AACA,wCAPA,CAQA;;AACA;AACA,KAnXA;AAoXA,iBApXA,yBAoXA,MApXA,EAoXA,MApXA,EAoXA,OApXA,EAoXA;AACA;AACA,wDADA;AAEA,0DAFA;AAGA,oCAHA;AAIA;AAJA;AAMA,KA3XA;AA4XA,mBA5XA,kCA4XA;AAAA;AAAA;;AACA;AAAA,UACA,UADA,GACA,EADA;AAAA,gCAEA,iCAFA;AAAA,UAEA,YAFA,uBAEA,YAFA;AAAA,UAEA,aAFA,uBAEA,aAFA;AAAA,UAEA,QAFA,uBAEA,QAFA;AAAA,UAEA,QAFA,uBAEA,QAFA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AAxBA;;AA0BA;AACA,KA3ZA;AA4ZA,kBA5ZA,iCA4ZA;AAAA;AAAA;;AACA;AAAA,UACA,UADA,GACA,EADA;AAAA,iCAEA,iCAFA;AAAA,UAEA,YAFA,wBAEA,YAFA;AAAA,UAEA,aAFA,wBAEA,aAFA;AAAA,UAEA,QAFA,wBAEA,QAFA;AAAA,UAEA,QAFA,wBAEA,QAFA;;AAGA;AACA;AACA;AACA,2BAFA,CAEA;;AACA;;AACA;AACA;AACA,2BAFA,CAEA;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AAjBA;;AAmBA;AACA,KApbA;AAqbA,iBArbA,yBAqbA,UArbA,EAqbA;AACA;AACA;AACA;;AACA;AACA;AACA,KA3bA;AA4bA,mBA5bA,kCA4bA;AAAA;AAAA;AACA;AACA;AACA,mCAHA,CAIA;AACA;AACA;AACA;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA,KAheA;AAieA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBA/eA,gCA+eA,CA/eA,EA+eA;AACA;AAAA,UACA,KADA,GACA,YADA;AAAA,2BAEA,YAFA;AAAA,UAEA,KAFA,kBAEA,KAFA;AAAA,UAEA,MAFA,kBAEA,MAFA;AAAA,UAGA,UAHA,GAGA;AACA,8DADA;AAEA,8DAFA,CAIA;;AAJA,OAHA;AAQA;AACA,KAzfA;AA0fA;AACA,aA3fA,uBA2fA;AACA;AACA;AACA;AACA;AACA;AACA,SAJA,MAIA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,4CAHA,CAIA;;AACA;AACA,mCADA;AAEA,2BAFA;AAGA,sBAHA;AAIA,gDAJA;AAKA;AALA;AAOA;AACA;AACA;AAEA,KAzhBA;AA0hBA,eA1hBA,uBA0hBA,CA1hBA,EA0hBA;AACA;AACA,yBAFA,CAGA;;AACA;AACA;AACA;AACA;AACA,OARA,CASA;;;AACA;AACA,kEAXA,CAYA;;AACA;AACA;AACA;AACA;AACA;AACA,KA5iBA;AA6iBA,cA7iBA,sBA6iBA,CA7iBA,EA6iBA;AACA;AACA;AACA;;AACA;AACA;AACA,cAFA,CAEA;;AACA,+BAHA,CAIA;;AACA,0GALA,CAMA;;AACA;AACA;AACA;AACA;AAAA,YACA,wCADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA1CA,CA2CA;;;AACA;;AACA;AACA;AACA;AACA,KA7lBA;AA8lBA,eA9lBA,uBA8lBA,CA9lBA,EA8lBA,CA9lBA,EA8lBA,MA9lBA,EA8lBA;AACA,6BACA,2BADA,IAEA,YAFA,IAGA,4BAHA;AAIA,KAnmBA;AAomBA,YApmBA,oBAomBA,CApmBA,EAomBA,CApmBA,EAomBA;AACA;AACA,sBAFA,CAGA;;AACA;AACA,kFALA,CAMA;;AACA,4EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADA;AAEA,KA7mBA;AA8mBA,wBA9mBA,uCA8mBA;AAAA;;AAAA;AAAA;AACA;AAAA,UACA,4BADA;AAEA;AACA,oBAJA,CAKA;;AACA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAPA,MAOA;AACA;AACA;AACA;AACA;AACA,OALA,MAKA;AACA;AACA,OAFA,MAEA;AACA;AACA,OAFA,CAGA;AAHA,WAIA;AACA;AACA;AACA,SAHA,GAIA;AACA;AACA;AACA,SAPA,CAQA;AARA,aASA;AACA;AACA;AACA,WAHA,GAIA;AACA;AACA;AACA,WAPA,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA,eAoBA;AACA;AACA;AACA;AACA;;AACA;AACA,KA5qBA;AA6qBA;AACA,eA9qBA,uBA8qBA,EA9qBA,EA8qBA,EA9qBA,EA8qBA;AACA;AAAA,UACA,uBADA;AAEA;AACA,KAlrBA;AAmrBA,SAnrBA,iBAmrBA,KAnrBA,EAmrBA,GAnrBA,EAmrBA,GAnrBA,EAmrBA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,KA3rBA;AA4rBA,YA5rBA,sBA4rBA;AAAA;;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AACA;AACA;A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EA;AAFA;AAIA;AAv+BA,G;;AC5BkT,CAAgB,4GAAG,EAAC,C;;ACAtU;;AAEA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AC5FsF;AAC3B;AACL;;;AAGtD;AACuF;AACvF,gBAAgB,kBAAU;AAC1B,EAAE,wCAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,6D;;CCff;AAEA;;AACA,IAAME,gBAAO,GAAG,SAAVA,OAAU,MAAe;AAC3B,MAAIA,OAAO,CAAX,WAAuB;AACvBA,SAAO,CAAPA,YAF2B,IAE3BA,CAF2B,CAG3B;AACA;;AACIC,KAAG,CAAHA,UAAcC,OAAI,CAAlBD,MALuB,OAKvBA,EALuB,CAM3B;AANJ,E,CASA;;;AACA,IAAI,iCAAiCE,MAAM,CAA3C,KAAiD;AAC7CH,kBAAO,CAACG,MAAM,CAAdH,GAAO,CAAPA;AACH;;AACc;AACXA,SAAO,EADI;AAEXE,MAAI,EAAJA,OAAIA;AAFO,CAAf;;;ACnBA;AAAwB;AACA;AACT,yFAAG;AACI","file":"vue-cropblg.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-cropblg\"] = factory();\n\telse\n\t\troot[\"vue-cropblg\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n","// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    require('current-script-polyfill')\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"mountNode\",staticClass:\"mount-node\",staticStyle:{\"overflow\":\"hidden\"},on:{\"touchstart\":function($event){return _vm.handleStart($event)},\"touchmove\":function($event){return _vm.handleMove($event)},\"touchend\":function($event){return _vm.handleEnd($event)}}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.noImage),expression:\"noImage\"}],staticClass:\"no-image-file\",staticStyle:{\"height\":\"100%\",\"display\":\"flex\",\"justify-content\":\"center\",\"align-items\":\"center\",\"flex-wrap\":\"wrap\"},on:{\"click\":_vm.inputHandle,\"touchstart\":function($event){$event.stopPropagation();return (function (){})($event)},\"touchmove\":function($event){$event.stopPropagation();return (function (){})($event)}}},[_vm._t(\"placeholder\",[_c('span',[_vm._v(\"暂时没有图片,请选择图像\")])]),_c('div',{staticStyle:{\"display\":\"none\"}},[_c('input',{attrs:{\"type\":\"file\",\"multiple\":false,\"id\":\"file-input\",\"accept\":\"image/*\"},on:{\"change\":_vm.uploadImg}}),_vm._t(\"defaultImgUrl\")],2)],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// exif  https://github.com/exif-js/exif-js/blob/master/exif.js\r\n\r\nexport const getImageDirection = (img) => new Promise((reslove, reject) => {\r\n    getImageData(img).then(data => {\r\n        const orientation =  getOrientation(data) || 1\r\n        reslove(orientation)\r\n    }).\r\n    catch(error => {\r\n        reject(error)\r\n    })\r\n})\r\n\r\n// 这里的获取exif要将图片转ArrayBuffer对象，这里假设获取了图片的baes64\r\n// 步骤一\r\n// base64转ArrayBuffer对象\r\nfunction getImageData(img) {\r\n    let data = null\r\n    return new Promise((reslove, reject) => {\r\n        if (img.src) {\r\n            // eslint-disable-next-line\r\n            if (/^data\\:/i.test(img.src)) { // Data URI\r\n                data = base64ToArrayBuffer(img.src)\r\n                reslove(data)\r\n            } else {\r\n                var http = new XMLHttpRequest()\r\n                http.onload = function() {\r\n                    if (this.status == 200 || this.status === 0) {\r\n                        data = http.response \r\n                        reslove(data)\r\n                    } else {\r\n                        throw \"Could not load image\"\r\n                    }\r\n                    http = null\r\n                }\r\n                http.open(\"GET\", img.src, true)\r\n                http.responseType = \"arraybuffer\"\r\n                http.send(null)\r\n            }\r\n        } else {\r\n            reject('img error')\r\n        }\r\n    })\r\n}\r\n\r\n/*eslint no-useless-escape: \"error\"*/\r\nfunction base64ToArrayBuffer(base64) {\r\n    // eslint-disable-next-line\r\n    base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\r\n    var binary = atob(base64);\r\n    var len = binary.length;\r\n    var buffer = new ArrayBuffer(len);\r\n    var view = new Uint8Array(buffer);\r\n    for (var i = 0; i < len; i++) {\r\n      view[i] = binary.charCodeAt(i);\r\n    }\r\n    return buffer;\r\n  }\r\n  // 步骤二，Unicode码转字符串\r\n  // ArrayBuffer对象 Unicode码转字符串\r\n  function getStringFromCharCode(dataView, start, length) {\r\n    var str = '';\r\n    var i;\r\n    for (i = start, length += start; i < length; i++) {\r\n      str += String.fromCharCode(dataView.getUint8(i));\r\n    }\r\n    return str;\r\n  }\r\n// 步骤三，获取jpg图片的exif的角度（在ios体现最明显）\r\nfunction getOrientation(arrayBuffer) {\r\n    var dataView = new DataView(arrayBuffer);\r\n    var length = dataView.byteLength;\r\n    var orientation;\r\n    var exifIDCode;\r\n    var tiffOffset;\r\n    var firstIFDOffset;\r\n    var littleEndian;\r\n    var endianness;\r\n    var app1Start;\r\n    var ifdStart;\r\n    var offset;\r\n    var i;\r\n    // Only handle JPEG image (start by 0xFFD8)\r\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\r\n        offset = 2;\r\n        while (offset < length) {\r\n            if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\r\n                app1Start = offset;\r\n                break\r\n            }\r\n            offset++\r\n        }\r\n    }\r\n    if (app1Start) {\r\n        exifIDCode = app1Start + 4;\r\n        tiffOffset = app1Start + 10;\r\n          if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\r\n            endianness = dataView.getUint16(tiffOffset);\r\n            littleEndian = endianness === 0x4949;\r\n            if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\r\n                if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\r\n                    firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\r\n                    if (firstIFDOffset >= 0x00000008) {\r\n                        ifdStart = tiffOffset + firstIFDOffset;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ifdStart) {\r\n        length = dataView.getUint16(ifdStart, littleEndian);\r\n        for (i = 0; i < length; i++) {\r\n            offset = ifdStart + i * 12 + 2;\r\n            if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) {\r\n                // 8 is the offset of the current tag's value\r\n                offset += 8\r\n                // Get the original orientation value\r\n                orientation = dataView.getUint16(offset, littleEndian)\r\n                // Override the orientation with its default value for Safari (#120)\r\n                // if (IS_SAFARI_OR_UIWEBVIEW) {\r\n                //   dataView.setUint16(offset, 1, littleEndian);\r\n                // }\r\n                break\r\n            }\r\n        }\r\n    }\r\n    return orientation;\r\n  }\r\n// canvas-exif-orientation  https://github.com/koba04/canvas-exif-orientation/blob/master/index.js\r\n//   \r\n  export function correctImage(img, orientation, type, x, y, width, height) {\r\n    if (!/^[1-8]$/.test(orientation)) throw new Error('orientation should be [1-8]')\r\n    if (x == null) x = 0\r\n    if (y == null) y = 0\r\n    if (width == null) width = img.width\r\n    if (height == null) height = img.height\r\n    var canvas = document.createElement('canvas')\r\n    var ctx = canvas.getContext('2d')\r\n    canvas.width = width\r\n    canvas.height = height\r\n    ctx.save()\r\n    switch (+orientation) {\r\n      // 1 = The 0th row is at the visual top of the image, and the 0th column is the visual left-hand side.\r\n      case 1:\r\n          break\r\n\r\n      // 2 = The 0th row is at the visual top of the image, and the 0th column is the visual right-hand side.\r\n      case 2:\r\n         ctx.translate(width, 0);\r\n         ctx.scale(-1, 1);\r\n         break\r\n\r\n      // 3 = The 0th row is at the visual bottom of the image, and the 0th column is the visual right-hand side.\r\n      case 3:\r\n          ctx.translate(width, height);\r\n          ctx.rotate(180 / 180 * Math.PI);\r\n          break\r\n\r\n      // 4 = The 0th row is at the visual bottom of the image, and the 0th column is the visual left-hand side.\r\n      case 4:\r\n          ctx.translate(0, height);\r\n          ctx.scale(1, -1);\r\n          break\r\n\r\n      // 5 = The 0th row is the visual left-hand side of the image, and the 0th column is the visual top.\r\n      case 5:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.rotate(90 / 180 * Math.PI);\r\n          ctx.scale(1, -1);\r\n          break\r\n\r\n      // 6 = The 0th row is the visual right-hand side of the image, and the 0th column is the visual top.\r\n      case 6:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.rotate(90 / 180 * Math.PI);\r\n          ctx.translate(0, -height);\r\n          break\r\n\r\n      // 7 = The 0th row is the visual right-hand side of the image, and the 0th column is the visual bottom.\r\n      case 7:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.rotate(270 / 180 * Math.PI);\r\n          ctx.translate(-width, height);\r\n          ctx.scale(1, -1);\r\n          break\r\n\r\n      // 8 = The 0th row is the visual left-hand side of the image, and the 0th column is the visual bottom.\r\n      case 8:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.translate(0, width);\r\n          ctx.rotate(270 / 180 * Math.PI);\r\n          break\r\n    }\r\n\r\n    ctx.drawImage(img, x, y, width, height)\r\n    ctx.restore()\r\n  \r\n    return canvas\r\n    // return  new Promise((reslove) => {\r\n    //     if (!type) {\r\n    //         reslove(canvas)\r\n    //         return\r\n    //     }\r\n    //     canvas.toBlob(function(blob) {\r\n    //         const newImg = new Image()\r\n    //         const url =  window.URL.createObjectURL(blob)\r\n    //         newImg.src = url\r\n    //         newImg.onload = function() {\r\n    //         // 手机上有严重的性能问题\r\n    //             reslove(newImg)\r\n    //         }\r\n    //     })\r\n    // })\r\n}\r\n  ","<template>\r\n    <div ref=\"mountNode\" \r\n        class=\"mount-node\" \r\n        @touchstart=\"handleStart($event)\"\r\n        @touchmove=\"handleMove($event)\"\r\n        @touchend=\"handleEnd($event)\"\r\n        style=\"overflow: hidden;\"\r\n    >\r\n         <!-- style=\" overflow: hidden;\" -->\r\n    <!--  不能绑在wrap 上=== 这样子任何点击都会计算 -后期优化-->\r\n        <div v-show=\"noImage\" @click=\"inputHandle\" class=\"no-image-file\" style=\"height: 100%; display: flex;justify-content: center;align-items: center;flex-wrap: wrap;\"  @touchstart.stop=\"()=>{}\" @touchmove.stop=\"()=>{}\">\r\n            <!-- <span>暂时没有图片,请选择图像</span> -->\r\n            <slot name=\"placeholder\"><span>暂时没有图片,请选择图像</span></slot>\r\n            <div style=\"display:none\">\r\n                <input \r\n                    @change=\"uploadImg\"\r\n                    type=\"file\"\r\n                    :multiple=\"false\"\r\n                    id=\"file-input\"\r\n                    accept=\"image/*\"\r\n                >\r\n                <slot name=\"defaultImgUrl\"></slot>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { getImageDirection, correctImage } from './util'\r\n    export default {\r\n        name: 'crop',\r\n        //1. props 验证   2.支持pc\r\n        props:[\r\n            'value',\r\n            'position',\r\n            'textWatermark',\r\n            'imgLoaded',\r\n            'imageWatermark',\r\n            'defaultImgUrl',\r\n            'color',\r\n            'angle',\r\n            'rotation',\r\n            'shape', \r\n            'penBtn',\r\n            'revokeBtn',\r\n            'rotateBtn'\r\n          ],\r\n        data() {\r\n            return {\r\n                // ready: false,\r\n                noImage: true,\r\n                ctx: null,\r\n                options: null,\r\n                pixelRatio: null,\r\n                scale:1,\r\n                canvas: null,\r\n                image: {},\r\n                points: [],\r\n                lines: [],\r\n                cropper: {},\r\n                corePoint: {},\r\n                startPoint: {},\r\n                nookSide: 20,\r\n                rotateAngle: 0,\r\n                bgOpacity: 0,\r\n                // 三个操作按钮  默认不显示的\r\n                touchBar: null,\r\n                paintBrush: null,\r\n                revokeBar: null\r\n            }\r\n        },\r\n        watch: {\r\n            shape() {\r\n                if (!this.noImage) {\r\n                    this.draw()\r\n                }\r\n            },\r\n            rotation() {\r\n                //  内旋转 外旋转 只能有一个\r\n                if (!this.noImage && !this.rotateBtn && !this.drawAction) {\r\n                    this.rotateAngle = this.rotation\r\n                    this.draw()\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            init(img){\r\n                this.pointList = []\r\n                const clientW = img.width,\r\n                clientH = img.height,\r\n                { width, height } = this.options\r\n                let currentW = clientW,\r\n                    currentH = clientH,\r\n                    k = 1 // contain 时的缩放比\r\n                // contain 图片\r\n                if (clientW > width) {\r\n                    // alert('12123')\r\n                    currentW = width\r\n                    k = currentW / clientW\r\n                    currentH = k * clientH\r\n                }\r\n                if (currentH > height) {\r\n                    currentH = height\r\n                    k = currentH / clientH\r\n                    currentW = k * clientW\r\n                }\r\n                // 针对小图片\r\n                const minNum = 120\r\n                if (clientW < minNum && currentH < minNum) {\r\n                    currentW = minNum\r\n                    k = currentW / clientW\r\n                    currentH = k * clientH\r\n                }\r\n                this.scale = k\r\n                // 针对小图片\r\n                this.image = {\r\n                    element: img,\r\n                    width: currentW, // 显示宽度\r\n                    height: currentH, // 真是 宽度\r\n                    x: (width - currentW) / 2,\r\n                    y: (height - currentH) / 2,\r\n                    clientWidth: clientW,\r\n                    clientHeight: clientH\r\n                }\r\n\r\n                const corePoint = this.corePoint = {x: width / 2 ,y : height / 2} \r\n                this.maxRadius = Math.min(width, height) / 2\r\n                this.arc = {\r\n                    x: corePoint.x,\r\n                    y: corePoint.y,\r\n                    r: this.maxRadius  / 2\r\n                }\r\n                this.cropper = {\r\n                    x: (width - currentW / 2) / 2,\r\n                    y: (height - currentH / 2) / 2,\r\n                    width: currentW  / 2,\r\n                    height: currentH / 2\r\n                }\r\n\r\n                const interval = 8 // 间隔\r\n                let number = 0  //  按钮数量\r\n\r\n                //  三个 if  更好 内聚 --\r\n                const rotateBtn = this.rotateBtn === undefined || this.rotateBtn \r\n                const penBtn = this.penBtn === undefined  || this.penBtn \r\n                const revokeBtn = this.revokeBtn  === undefined  || this.revokeBtn\r\n                if (rotateBtn) {\r\n                    this.touchBar = {\r\n                        x: width - 30 - 7,\r\n                        y: 10,\r\n                        width: 30,\r\n                        height: 30\r\n                    }\r\n                    number ++ \r\n                }\r\n                // width  画布宽度\r\n                if (penBtn) {\r\n                    this.paintBrush = {\r\n                        x: width - 30 - 7,\r\n                        y: 10 + ( 30 + interval) * number,\r\n                        width: 30,\r\n                        height: 30\r\n                    }\r\n                    number ++ \r\n                }\r\n                if (revokeBtn) {\r\n                    this.revokeBar = {\r\n                        x: width - 30 - 7,\r\n                        y: 10 + (30  + interval ) * number,\r\n                        width: 30,\r\n                        height: 30\r\n                    }\r\n                    number ++ \r\n                }\r\n                this.draw()\r\n            },\r\n            draw() {\r\n                const { width, height } = this.options,\r\n                shape = this.shape || 'rect'\r\n                // 避免预览到背景\r\n                this.ctx.clearRect(0, 0, width, height)\r\n                // // 背景 // 考虑用css 实现\r\n                this.fillBackground()\r\n                //  处理出片\r\n                this.fillImage()\r\n                // console.timeEnd('fillImage')\r\n                this.drawPointFn(this.ctx)\r\n                if (!this.averageColor) {\r\n                        this.averageColor = this.getImageColor(this.ctx.getImageData(this.corePoint.x - 25,  this.corePoint.y - 25, 50, 50).data)\r\n                }\r\n                if (shape === 'arc') {\r\n                    this.fillArcCropper()\r\n                } else  if (shape === 'rect') {\r\n                    this.updatePoint()\r\n                    this.fillRectCropper()\r\n                }\r\n                //  console.time('drawTouchBar')\r\n                this.drawTouchBar(this.touchBar)\r\n                this.drawPaintBrush(this.paintBrush)\r\n                this.drawRevokeBar(this.revokeBar)\r\n                // 写的 线\r\n                // console.timeEnd('drawTouchBar')\r\n                // this.preview()\r\n            },\r\n            // rotatePoint({ pageX, pageY }, r, angle){\r\n            //     angle = Math.PI / 180 * angle\r\n            //     return { \r\n            //         x: pageX + Math.cos(angle) * r,\r\n            //         y: pageY + Math.sin(angle) * r\r\n            //     }\r\n            // },\r\n            drawPointFn(ctx, quality = null, cropper = this.image, image = this.image){\r\n                const pointList = this.pointList\r\n                // const image = this.image\r\n                if (pointList.length > 0) {\r\n                    pointList.forEach(el => {\r\n                        const scale = this.scale / el.scale\r\n                        const lineWidth =  this.limit(el.lineWidth * scale, 1, 5)\r\n                        ctx.lineWidth = quality ? lineWidth * 2 : lineWidth\r\n                        ctx.strokeStyle = el.color\r\n                        ctx.lineCap = 'round'\r\n                        ctx.beginPath()\r\n                        el.pointLine.forEach((element,i)=>{\r\n                            if (i === 0) {\r\n                                // 要相对于图片的位置 才是对的  不能相对于 画布\r\n                                if (quality) {\r\n                                    // console.log(element)\r\n                                    ctx.moveTo((image.x + (element.x * scale) - cropper.x)* quality , (image.y + (element.y * scale) - cropper.y) * quality)\r\n                                } else {\r\n                                    ctx.moveTo((image.x + element.x * scale) , (image.y + element.y * scale))\r\n                                }\r\n                            }\r\n                            if (quality) {\r\n                                ctx.lineTo((image.x + (element.x * scale) - cropper.x) * quality, (image.y + (element.y * scale) - cropper.y) * quality)\r\n                            } else {\r\n                                ctx.lineTo((image.x + element.x * scale), (image.y + element.y * scale))\r\n                            }\r\n                        })\r\n                        ctx.stroke()\r\n                    })\r\n                }\r\n                //  ctx.lineWidth = 5\r\n            },\r\n            drawPaintBrush(touchBar) {\r\n                if (!touchBar) return\r\n                const {x, y} = touchBar \r\n                const ctx = this.ctx,\r\n                // touchBar = touchBar,\r\n                color = this.color || this.averageColor\r\n                ctx.lineWidth = 2\r\n                ctx.lineCap = 'round'\r\n                ctx.beginPath()\r\n                ctx.moveTo(x + 20, y + 5)\r\n                ctx.lineTo(x + 24, y +  9)\r\n                ctx.lineTo(x + 12, y + 21)\r\n                ctx.lineTo(x + 7, y + 22)\r\n                ctx.lineTo(x + 8, y + 17)\r\n                // ctx.lineTo(x + 20, y + 5)\r\n                ctx.closePath()\r\n                if (this.drawAction) {\r\n                    ctx.fillStyle = color\r\n                    ctx.fill();\r\n                }\r\n                // ctx.stroke()\r\n                ctx.moveTo(x + 5, y + 26)\r\n                ctx.lineTo(x + 25, y + 26)\r\n                 ctx.stroke()\r\n            },\r\n            drawRevokeBar(touchBar) {\r\n                if (!touchBar) return\r\n                const {x, y} = touchBar\r\n                //  const {x, y, width} = touchBar   //  用宽 算个比例\r\n                const ctx = this.ctx,\r\n                // touchBar = touchBar,\r\n                color = this.color || this.averageColor\r\n                ctx.lineWidth = 2\r\n                ctx.lineCap = 'round'\r\n                ctx.beginPath()\r\n                ctx.moveTo(x + 15, y + 12)\r\n                ctx.lineTo(x + 15, y + 8)\r\n                ctx.lineTo(x + 7, y + 15)\r\n\r\n                ctx.lineTo(x + 15, y + 22)\r\n                ctx.lineTo(x + 15, y + 18)\r\n                ctx.stroke()\r\n                ctx.fillStyle = color\r\n                ctx.fill()\r\n                ctx.beginPath()\r\n                ctx.arc(x + 15,  y + 24, 12, -Math.PI/2, -Math.PI/180 * 18, false)\r\n                ctx.arc(x + 15,  y + 35, 17,-Math.PI/180 * 45, -Math.PI/2, true)\r\n                ctx.stroke()\r\n                ctx.fillStyle = color\r\n                ctx.fill()\r\n            },\r\n            drawTouchBar(touchBar) {\r\n                if (!touchBar) return\r\n                const ctx = this.ctx,\r\n                color = this.color || this.averageColor,\r\n                x = touchBar.x + touchBar.width * 0.6,\r\n                y =  touchBar.y + touchBar.height * 0.64,\r\n                r = touchBar.width * 0.41,\r\n                alpha = 6,\r\n                h1 = touchBar.width * 0.1,\r\n                h2 =  touchBar.width * 0.18\r\n                ctx.lineWidth = 1\r\n                // 填充颜色\r\n                ctx.fillStyle = color\r\n                // strokeRect  fillRect\r\n                ctx.fillRect(x - touchBar.width / 6, y - touchBar.height / 6, touchBar.width * 0.43, touchBar.height * 0.43)\r\n                ctx.beginPath()\r\n                ctx.arc(x, y, r, Math.PI/180 * 180, -Math.PI/2 + alpha, false)\r\n                ctx.stroke()\r\n                if(alpha < 2*Math.PI) {\r\n                    const x1 = x + (r - h1) * Math.sin(alpha),\r\n                    y1 = y - (r - h1) * Math.cos(alpha),\r\n                    x2 = x + (r + h1) * Math.sin(alpha),\r\n                    y2 = y - (r + h1) * Math.cos(alpha),\r\n                    x0 = (x1 + x2) / 2 + h2 * Math.sin(alpha + Math.PI/2),\r\n                    y0 = (y1 + y2) / 2 - h2 * Math.cos(alpha + Math.PI/2)\r\n                    ctx.beginPath()\r\n                    ctx.moveTo(x0, y0)\r\n                    ctx.lineTo(x1, y1)\r\n                    ctx.lineTo(x2, y2)\r\n                    ctx.fill()\r\n                }\r\n            },\r\n            fillImage() {\r\n                const image = this.image\r\n                const ctx = this.ctx\r\n                const rotateAngle = this.rotateAngle\r\n                this.canvasRotate('img', ctx, image.element, rotateAngle, image.x, image.y, image.width, image.height)\r\n                // ctx.drawImage(image.element, image.x, image.y, image.width, image.height)\r\n            },\r\n            updatePoint() {\r\n                // 点中点和线 不用 执行 \r\n                const c = this.cropper,\r\n                nookSide =  this.nookSide,\r\n                cWidth = c.x + c.width,\r\n                cHeight = c.y + c.height,\r\n                forecastX = cWidth - nookSide,\r\n                forecastY = cHeight - nookSide\r\n                this.points = [\r\n                    {\r\n                        x: c.x,\r\n                        y: c.y,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: 0,\r\n                        diffY: 0\r\n                    },\r\n                    {\r\n                        x: forecastX ,\r\n                        y: c.y,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: nookSide,\r\n                        diffY: 0\r\n                    },\r\n                    {\r\n                        x: forecastX ,\r\n                        y: forecastY,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: nookSide,\r\n                        diffY: nookSide\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: forecastY,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: 0,\r\n                        diffY: nookSide\r\n                    }\r\n                ]\r\n                // 寻找四根线\r\n                const lineHeight = nookSide / .7,\r\n                halfLineHeight = lineHeight / 2\r\n                this.lines = [\r\n                     {\r\n                        x: c.x,\r\n                        y: c.y - halfLineHeight,\r\n                        width: c.width,\r\n                        height: lineHeight\r\n                    },\r\n                    {\r\n                        x: cWidth - halfLineHeight,\r\n                        y: c.y,\r\n                        width: lineHeight,\r\n                        height: c.height\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: cHeight - halfLineHeight,\r\n                        width: c.width,\r\n                        height: lineHeight\r\n                    },\r\n                    {\r\n                        x: c.x - halfLineHeight,\r\n                        y: c.y,\r\n                        width: lineHeight,\r\n                        height: c.height\r\n                    }\r\n                ]\r\n            },\r\n            fillRectCropper() {\r\n                const ctx = this.ctx,\r\n                cropper = this.cropper,\r\n                points = this.points,\r\n                color = this.color || this.averageColor\r\n                ctx.strokeStyle = color\r\n                ctx.lineWidth = 2\r\n                ctx.strokeRect(cropper.x, cropper.y, cropper.width, cropper.height)\r\n                ctx.fillStyle = color\r\n                const nookSide = this.nookSide / 8\r\n                points.forEach((element, index) => {\r\n                    ctx.save()\r\n                    ctx.translate(element.x + element.diffX, element.y + element.diffY)\r\n                    ctx.rotate(index * 90 * (Math.PI/180))\r\n                    ctx.fillRect(-nookSide, -nookSide, element.height, nookSide * 2)\r\n                    ctx.fillRect(-nookSide, -nookSide, nookSide * 2, element.width)\r\n                    // if(index % 2 === 0){\r\n                    //     ctx.fillRect(-nookSide, cropper.height / 2 - element.nookSide , element.nookSide / 4, element.nookSide * 2)\r\n                    // } else {\r\n                    //     ctx.fillRect(-nookSide, cropper.width / 2 - element.nookSide, element.nookSide / 4, element.nookSide * 2)\r\n                    // }\r\n                    ctx.restore()\r\n                });\r\n                // console.log(this.arc.r)\r\n                // 圆\r\n\r\n                \r\n            },\r\n            fillArcCropper() {\r\n                const ctx = this.ctx\r\n                ctx.beginPath()\r\n                ctx.strokeStyle = this.color || this.averageColor\r\n                ctx.lineWidth =  2 // this.nookSide / 0.7\r\n                ctx.arc(this.arc.x, this.arc.y, this.arc.r, 0, Math.PI * 2)\r\n                ctx.stroke();\r\n            },\r\n            handleArcMove({x, y}) {\r\n                this.arc.r = this.limit(this.getDistance({pageX: x, pageY: y}, {pageX: this.arc.x, pageY: this.arc.y}), this.nookSide * 2, this.maxRadius)\r\n                this.draw()\r\n            },\r\n           // 填充背景\r\n            fillBackground() {\r\n                // 多个变量可以用逗号 一次赋值\r\n                const { width, height } = this.options, \r\n                ctx = this.ctx\r\n                ctx.save()\r\n                ctx.fillStyle = '#fff'\r\n                ctx.fillStyle = `rgba(0, 0, 0, ${this.bgOpacity})`\r\n                ctx.fillRect(0, 0, width, height)\r\n                 //蒙层 \r\n                ctx.restore()\r\n            },\r\n            getNewCropper(touchX, touchY ,cropper) {\r\n               return {\r\n                    cropperWidth:(cropper.x + cropper.width) - touchX,\r\n                    cropperHeight: (cropper.y + cropper.height) - touchY,\r\n                    cropperX: touchX - cropper.x,\r\n                    cropperY: touchY - cropper.y\r\n               }\r\n            },\r\n            handlePointMove({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {},\r\n                { cropperWidth, cropperHeight, cropperX, cropperY } = this.getNewCropper(x, y, cropper)\r\n                switch (this.index) {\r\n                    case 0:\r\n                        newCropper.width =  cropperWidth\r\n                        newCropper.height = cropperHeight\r\n                        newCropper.x = x\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 1:\r\n                    // x  不会动\r\n                        newCropper.width =  cropperX\r\n                        newCropper.height =  cropperHeight\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 3:\r\n                    // y 不会动\r\n                        newCropper.width = cropperWidth\r\n                        newCropper.height = cropperY\r\n                        newCropper.x = x\r\n                        break;\r\n                    case 2:\r\n                        newCropper.width = cropperX\r\n                        newCropper.height = cropperY\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.renderCropper(newCropper)\r\n            },\r\n            handleLineMove ({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {},\r\n                { cropperWidth, cropperHeight, cropperX, cropperY } = this.getNewCropper(x, y, cropper)\r\n                switch (this.index) {\r\n                    case 3:\r\n                        newCropper.width = cropperWidth\r\n                        newCropper.x = x // 限制\r\n                        break;\r\n                    case 0:\r\n                        newCropper.height = cropperHeight\r\n                        newCropper.y = y // 限制\r\n                        break;\r\n                    case 1:\r\n                        newCropper.width = cropperX\r\n                        break;\r\n                    case 2:\r\n                    // y 不会动\r\n                        newCropper.height = cropperY\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.renderCropper(newCropper)\r\n            },\r\n            renderCropper(newCropper) {\r\n                 if (newCropper.width <= this.nookSide * 4 || newCropper.height <= this.nookSide * 4) {\r\n                    return\r\n                }\r\n                this.cropper = {...this.cropper,...newCropper}\r\n                this.draw()\r\n            },\r\n            handleImageMove ({ x, y }) {\r\n                const s = this.startPoint\r\n                this.image.x = x - s.offsetX\r\n                this.image.y = y - s.offsetY\r\n                // 限制图片移动的范围\r\n                // 三种情况 \r\n                // 1. 图片\r\n                // 2. 框\r\n                // 3. 圆圈\r\n                /**     \r\n                    let cropper = this.cropper\r\n                    const shape = this.shape || 'rect'\r\n                    if (shape == 'imgage') {\r\n                        // this.options\r\n                        cropper = {\r\n                            x: 0,\r\n                            y: 0,\r\n                            width: this.options.width,\r\n                            height: this.options.height\r\n                        }\r\n                    } else if (shape === 'arc') {\r\n                        cropper = {\r\n                            x: this.arc.x - this.arc.r,\r\n                            y: this.arc.y - this.arc.r,\r\n                            width: this.arc.r * 2,\r\n                            height: this.arc.r * 2\r\n                        }\r\n                    }\r\n                    const left = cropper.x,\r\n                    right = cropper.x + cropper.width,\r\n                    bottom = cropper.y + cropper.height,\r\n                    top = cropper.y\r\n                    this.image.x = this.limit(x - s.offsetX, right - this.image.width, left)\r\n                    this.image.y = this.limit(y - s.offsetY, bottom - this.image.height, top)\r\n                */\r\n                this.draw()\r\n            },\r\n            // handleCropperMove({ x, y }) {\r\n            //     const { width, height } = this.options;\r\n            //     const s = this.startPoint;\r\n            //     const oX = s.offsetX;\r\n            //     const oY = s.offsetY;\r\n            //     const maxX = width - this.cropper.width;\r\n            //     const maxY = height - this.cropper.height;\r\n            //     let currentX = x - oX,\r\n            //     currentY = y - oY;\r\n            //     // 判断边界\r\n            //     this.cropper.x = this.limit(currentX, 0, maxX)\r\n            //     this.cropper.y = this.limit(currentY, 0, maxY)\r\n            //     this.draw()\r\n            // },\r\n            getCoordinateByEvent(e){\r\n                const rect = e.target.getBoundingClientRect(),\r\n                touch = e.touches[0],\r\n                { width, height } = this.options,\r\n                coordinate = {\r\n                    x: this.limit(touch.clientX - rect.left, 2, width - 2) ,\r\n                    y: this.limit(touch.clientY - rect.top, 2, height - 2) ,\r\n                }\r\n                // move 到边\r\n                return coordinate\r\n            },\r\n            // https://blog.csdn.net/qq_42014697/article/details/80728463  两指缩放\r\n            handleEnd(){\r\n                if (this.changeDrawAction) {\r\n                    if (this.drawAction) {\r\n                        this.drawAction = false\r\n                        this.bgOpacity = 0\r\n                        this.draw()\r\n                    } else {\r\n                        this.drawAction = true\r\n                        this.bgOpacity = .4\r\n                        this.draw()\r\n                    }\r\n                    this.changeDrawAction = false\r\n                    return\r\n                }\r\n                if (this.drawAction && this.pointLine.length > 0) {\r\n                    this.drawPoint.x = this.drawPoint.x - this.image.x\r\n                    this.drawPoint.y = this.drawPoint.y - this.image.y\r\n                    this.pointLine.push(this.drawPoint)\r\n                    // 点的 宽度\r\n                    const pointObj = {\r\n                        pointLine: this.pointLine,\r\n                        scale: this.scale,\r\n                        lineWidth: 3,\r\n                        color: this.color || this.averageColor,\r\n                        rotateAngle : this.rotateAngle\r\n                    }\r\n                    this.pointList.push(pointObj)\r\n                    this.pointLine = []\r\n                }\r\n                \r\n            },\r\n            handleStart(e) {\r\n                // alert(1)\r\n                e.preventDefault()\r\n                // 双指\r\n                if (e.touches.length > 1) {\r\n                    this.startTouches = e.touches\r\n                    this.startPoint.type = null\r\n                    return;\r\n                }\r\n                // 单指  起点\r\n                this.drawPoint = this.getCoordinateByEvent(e)\r\n                this.startPoint = this.getPointByCoordinate(this.drawPoint)\r\n                // --  画画\r\n                if (this.drawAction) {\r\n                    this.pointLine = []\r\n                    this.ctx.beginPath()\r\n                    this.ctx.moveTo(this.drawPoint.x, this.drawPoint.y)\r\n                }\r\n            },\r\n            handleMove (e) {\r\n                e.preventDefault()\r\n                const touches = e.touches\r\n                const image = this.image\r\n                if (touches.length > 1 && !this.drawAction) {\r\n                    let startTouches = this.startTouches\r\n                    let k; // 最终的缩放系数\r\n                    const scale = this.scale;\r\n                    // const offset = e.deltaY / 800;\r\n                    k = (this.getDistance(touches[0], touches[1]) / this.getDistance(startTouches[0], startTouches[1]))\r\n                    // k = k < 1 ? k / 10 : k * 10\r\n                    k = k < 1 ? 1 / (1 + k / 80) : 1 + Math.abs(k) / 160\r\n                    k = k * scale;\r\n                    this.scale = this.limit(k, 0.02, 1.07)\r\n                    const width = image.clientWidth * this.scale,\r\n                    height = image.clientHeight * this.scale\r\n                    this.image.x += (image.width - width) / 2\r\n                    this.image.y += (image.height - height) / 2\r\n                    this.image.width = width\r\n                    this.image.height = height\r\n                    this.draw()\r\n                    return\r\n                }\r\n                if (this.drawAction) {\r\n                    // 划线\r\n                    // 先实现划线\r\n                    //  画 相对于 画布  // 存 相对于 画布\r\n                    // 屡一下   -- 这个东西  想对于画布  在图片在哪里 ===== 根据图片的位置还原 画布位置\r\n                    const drawPoint = this.drawPoint\r\n                    const current = this.getCoordinateByEvent(e)\r\n                    const ctx = this.ctx\r\n                    const color =  this.color || this.averageColor\r\n                    ctx.lineTo(current.x, current.y)\r\n                    ctx.lineWidth = 3\r\n                    ctx.strokeStyle = color\r\n                    ctx.lineCap = 'round'\r\n                    ctx.stroke()\r\n                    drawPoint.x = drawPoint.x - image.x\r\n                    drawPoint.y = drawPoint.y - image.y\r\n                    this.pointLine.push(drawPoint)\r\n                    this.drawPoint = current\r\n                    return\r\n                }\r\n                // 这是干啥的--画=>图片和 线\r\n                const type = this.startPoint ? this.startPoint.type : null\r\n                if (type && this.getCoordinateByEvent(e)) {\r\n                    this[type](this.getCoordinateByEvent(e))\r\n                }\r\n            },\r\n            checkRegion(x,y,target) {\r\n                return x > target.x &&\r\n                    x < target.x + target.width &&\r\n                    y > target.y &&\r\n                    y < target.y + target.height\r\n            },\r\n            checkArc(x, y) {\r\n                const ctx  = this.ctx\r\n                ctx.beginPath()\r\n                // ctx.strokeStyle = 'red'//'transparent'\r\n                ctx.lineWidth = this.nookSide / 0.7\r\n                ctx.arc(this.arc.x, this.arc.y, this.arc.r + ctx.lineWidth , 0, Math.PI * 2)\r\n                // ctx.stroke() \r\n                return (ctx.isPointInPath(x * this.pixelRatio, y * this.pixelRatio)\r\n                 && this.getDistance({pageX: x, pageY: y}, {pageX: this.arc.x, pageY: this.arc.y}) >  this.arc.r - ctx.lineWidth / 2)\r\n            },\r\n            getPointByCoordinate({x, y}) {\r\n                const image = this.image,\r\n                shape = this.shape || 'rect'\r\n                let t = {}\r\n                let index = 0\r\n                //  旋转\r\n                if ( this.paintBrush && this.checkRegion(x, y, this.paintBrush)) {\r\n                    this.changeDrawAction = true\r\n                    return\r\n                }else if (this.revokeBar && this.checkRegion(x, y, this.revokeBar)) {\r\n                    // t.type = 'draw'\r\n                    // 接下来 是draw 动作\r\n                    //  再次进来  保存 起始点 坐标\r\n                    this.pointList.pop()\r\n                    this.draw()\r\n                    return\r\n                } else if (this.touchBar && this.checkRegion(x, y, this.touchBar)) {\r\n                    // 旋转后的角度 每次\r\n                    this.rotateAngle =  (this.rotateAngle + this.angle ) % 360\r\n                    this.draw()\r\n                    return\r\n                } else if(this.drawAction){\r\n                    return\r\n                } else if (shape === 'arc' && this.checkArc(x, y)) {\r\n                    t.type = 'handleArcMove'\r\n                }\r\n                // 四个角移动         \r\n                else if (shape !== 'arc' && this.points.some((point,i) => {\r\n                    index = i\r\n                    return this.checkRegion(x,y,point)\r\n                })\r\n                ) {\r\n                    t.type = 'handlePointMove'\r\n                    this.index = index\r\n                }\r\n                // 四根线移动\r\n                else if (shape === 'rect' && this.lines.some((line,i) => {\r\n                    index = i\r\n                    return this.checkRegion(x,y,line)\r\n                }) \r\n                ) {\r\n                    t.type = 'handleLineMove'\r\n                    this.index = index\r\n                }\r\n                // else if (\r\n                // cropper &&\r\n                // x > cropper.x &&\r\n                // x < cropper.x + cropper.width &&\r\n                // y > cropper.y &&\r\n                // y < cropper.y + cropper.height\r\n                // ) {\r\n                // t.offsetX = x - cropper.x;\r\n                // t.offsetY = y - cropper.y;\r\n                // t.type = 'handleCropperMove'\r\n                // }\r\n                // 图片移动\r\n                else if (this.checkRegion(x,y,image)) {\r\n                    t.offsetX = x - image.x\r\n                    t.offsetY = y - image.y\r\n                    t.type = 'handleImageMove' \r\n                }\r\n                return t\r\n            },\r\n            // 求两点之间的 距离\r\n            getDistance(p1, p2) {\r\n                const x = p2.pageX - p1.pageX,\r\n                    y = p2.pageY - p1.pageY\r\n                return Math.sqrt((x * x) + (y * y))\r\n            },\r\n            limit(value, min, max) {\r\n                if (value < min) {\r\n                    return min\r\n                }\r\n                if (value > max) {\r\n                    return max\r\n                }\r\n                return value\r\n            },\r\n            getImage(type='Base64', mimeType='image/jpeg', quality=1) {\r\n                if (this.noImage) return\r\n                const shape = this.shape || 'rect'\r\n                let cropper = this.cropper\r\n                if (shape == 'imgage') {\r\n                    cropper = this.image\r\n                } else if (shape === 'arc') {\r\n                    // 圆形必须 2倍才好\r\n                    cropper = {\r\n                        x: this.arc.x - this.arc.r,\r\n                        y: this.arc.y - this.arc.r,\r\n                        width:  this.arc.r * 2,\r\n                        height:  this.arc.r * 2\r\n                    }\r\n                }\r\n                const image = this.image,\r\n                pixelRatio = this.pixelRatio,\r\n                types = {\r\n                    Base64(canvas, mimeType, resolve) {\r\n                        resolve(canvas.toDataURL(mimeType))\r\n                    },\r\n                    Blob(canvas, mimeType, resolve){\r\n                        canvas.toBlob((blob)=> {\r\n                            resolve(blob)\r\n                        }, mimeType)\r\n                    } \r\n                },\r\n                w = cropper.width * quality ,\r\n                h = cropper.height * quality,\r\n                // 变量申请\r\n                canvasDom =  document.createElement('canvas'),\r\n                cCtx = canvasDom.getContext('2d')\r\n                // if (!this.canvas) {\r\n                //     this.canvas = document.createElement('canvas')\r\n                //     this.cCtx = this.canvas.getContext('2d')\r\n                    // const { mountNode } = this.$refs\r\n                    // mountNode.appendChild(this.canvas)\r\n                // }\r\n                // const cCtx = this.cCtx\r\n                canvasDom.width = w * pixelRatio\r\n                canvasDom.height = h * pixelRatio\r\n                cCtx.scale(pixelRatio, pixelRatio)\r\n                cCtx.clearRect(0, 0, w, h)\r\n                const rotateAngle = this.rotateAngle\r\n                if (shape === 'arc') {\r\n                    const radius = w / 2\r\n                    cCtx.beginPath()\r\n                    // 圆心是当前正方形的(画布) 中间\r\n                    cCtx.arc(radius , radius, radius, 0, Math.PI * 2, false)\r\n                    cCtx.clip()\r\n                }\r\n                //  圆形 只有 2 倍 缩放 数据是正确的\r\n                // 旋转图片  这个是  主图旋转  /也是canvas 上 img\r\n                this.canvasRotate('img', cCtx, image.element,\r\n                    rotateAngle,\r\n                    (image.x - cropper.x)  * quality,\r\n                    (image.y - cropper.y)  * quality,\r\n                    image.width * quality,\r\n                    image.height * quality\r\n                )\r\n                // 在整个图片上 写写画画  再要框了--- 就是说框是---img\r\n                this.drawPointFn(cCtx, quality, cropper)\r\n                return new Promise((resolve, reject) => {\r\n                    if(!types[type]) {\r\n                        reject('type = Blob || Base64')\r\n                        return  \r\n                    }\r\n                    const [left = '50%', top = '50%', size = 1, angle = 0] = this.position\r\n                    if (this.imageWatermark) {\r\n                        let watermarkImg = new Image()\r\n                        watermarkImg.src = this.getFileSrc(this.imageWatermark)\r\n                        watermarkImg.crossOrigin = 'anonymous'\r\n                        watermarkImg.onload = () => { // 等到图片加载进来之后\r\n                            const width = watermarkImg.width * size * quality / 100,\r\n                            height = watermarkImg.height * size * quality / 100,\r\n                            imgX  = ( w - width ) * parseInt(left) / 100 ,\r\n                            imgY =  (h - height) * parseInt(top) / 100\r\n                            this.canvasRotate('img', cCtx, watermarkImg, angle, imgX, imgY, width, height)\r\n                            types[type](canvasDom, mimeType, resolve)\r\n                        }\r\n                        return\r\n                    }             \r\n                    if (this.textWatermark) {\r\n                        const height = this.limit(size, 12, 100)\r\n                        cCtx.font = height + 'px Georgia'\r\n                        const text = this.textWatermark,\r\n                        width = cCtx.measureText(text).width,\r\n                        textX = (w - width * 1.031 )  * parseInt(left) / 100,\r\n                        textY = (h + height * 0.72)  * parseInt(top) / 100\r\n                        // 变量申请\r\n                        cCtx.fillStyle = this.color || this.averageColor\r\n                        // console.log(this.cCtx.fillStyle)\r\n                        if(cCtx.fillStyle === '#ffffff') {\r\n                            cCtx.fillStyle = '#000'\r\n                        }\r\n                        this.canvasRotate('text', cCtx, text, angle, textX, textY, width, height)\r\n                        types[type](canvasDom, mimeType, resolve)\r\n                        return\r\n                    }\r\n                    types[type](canvasDom, mimeType, resolve)\r\n                })\r\n            },\r\n            canvasRotate(type, ctx, target, angle, x, y, width,height) {\r\n                ctx.save()\r\n                const halfHeight = height / 2,\r\n                halfWidth = width / 2\r\n                ctx.translate(x + halfWidth, y + halfHeight)\r\n                ctx.rotate(Math.PI / 180 * angle)\r\n                if (type === 'img') {\r\n                    ctx.drawImage(\r\n                        target,\r\n                        -halfWidth,\r\n                        -halfHeight,\r\n                        width,\r\n                        height\r\n                    )\r\n                } else if (type === 'text') {\r\n                    ctx.fillText(target, -halfWidth , -halfHeight)\r\n                }\r\n                ctx.restore()\r\n            },\r\n            changeImage(imgAddress) {\r\n                if (this.noImage) return\r\n                this.averageColor = null\r\n                if (imgAddress) {\r\n                    this.createImage(imgAddress)\r\n                    return\r\n                }\r\n                this.inputHandle()\r\n            },\r\n            // 工具\r\n            getPixelRatio(context) {\r\n                const backingStore = context.backingStorePixelRatio ||\r\n                context.webkitBackingStorePixelRatio ||\r\n                context.mozBackingStorePixelRatio ||\r\n                context.msBackingStorePixelRatio ||\r\n                context.oBackingStorePixelRatio ||\r\n                context.backingStorePixelRatio || 1\r\n                return (window.devicePixelRatio || 1) / backingStore\r\n            },\r\n        //    isWeiXin() {\r\n        //         const ua = window.navigator.userAgent.toLowerCase();\r\n        //         if (ua.match(/MicroMessenger/i) == 'micromessenger') {\r\n        //             return true\r\n        //         } else {\r\n        //             return false\r\n        //         }\r\n        //     },\r\n            uploadImg(e) {\r\n                this.createImage(e.target.files[0])\r\n                this.noImage = false\r\n            },\r\n            getFileSrc(src) {\r\n                if (Object.prototype.toString.call(src) === '[object File]') {\r\n                   src = window.URL.createObjectURL(src)\r\n                }\r\n                return src\r\n            },\r\n            createImage(imgfile) {\r\n                let img = new Image()\r\n                //  url , imgsrc, 文件  三种情况\r\n                img.crossOrigin = 'anonymous'\r\n                img.src = this.getFileSrc(imgfile)\r\n                img.onload = () => { // 等到图片加载进来之后\r\n                    getImageDirection(img).then(res => {\r\n                        if (res === 1) {\r\n                            this.init(img)\r\n                            this.$emit('imgLoaded')\r\n                            return \r\n                        }\r\n                        //  只有钉钉  会莫名其妙 卡顿- =>   把图片 画在canvas 背景上了\r\n                        this.init(img)\r\n                        this.init(correctImage(img, res))\r\n                        this.$emit('imgLoaded')\r\n                       \r\n                    }).catch( err =>{\r\n                        // eslint-disable-next-line\r\n                        console.error(err)\r\n                    })\r\n                }\r\n            },\r\n            inputHandle() {\r\n                document.getElementById('file-input').click()\r\n            },\r\n            getImageColor(data) { \r\n                let r=0, g=0, b=0\r\n                // 取所有像素的平均值\r\n                const num = this.limit(data.length, 1, 20)\r\n                for (let row = 0; row < num; row++) {\r\n                    for (let col = 0; col < num; col++) {\r\n                        r += data[((num * row) + col) * 4]\r\n                        g += data[((num * row) + col) * 4 + 1]\r\n                        b += data[((num * row) + col) * 4 + 2]\r\n                    }\r\n                }\r\n                // 求取平均值\r\n                r /= (num * num)\r\n                g /= (num * num)\r\n                b /= (num * num)\r\n                // 将最终的值取整\r\n                r = Math.round(r)\r\n                g = Math.round(g)\r\n                b = Math.round(b)\r\n                return `rgba(${255 - r}, ${255 - g}, ${255 - b}, 1)`\r\n            }\r\n        },\r\n        mounted() {\r\n            // 解决 字体模糊\r\n            const { mountNode } = this.$refs\r\n            const { clientWidth, clientHeight } = mountNode\r\n            // p可以优化\r\n            this.options = {\r\n                width: clientWidth,\r\n                height: clientHeight\r\n            }\r\n            // canvas dom\r\n            let canvasDom =  document.createElement('canvas')\r\n            canvasDom.style.width =  clientWidth + 'px'\r\n            canvasDom.style.height = clientHeight + 'px'\r\n            //  小方格背景\r\n            canvasDom.style.backgroundColor = '#fff'\r\n            canvasDom.style.backgroundImage =  'linear-gradient(45deg, #ccc 25%, transparent 25%, transparent 75%, #ccc 75%), linear-gradient(45deg, #ccc 25%, transparent 25%, transparent 75%, #ccc 75%)'\r\n            canvasDom.style.backgroundSize = '29px 29px'\r\n            canvasDom.style.backgroundPosition = '0 0, 15px 15px'\r\n            mountNode.appendChild(canvasDom)\r\n            // this.options = canvasDom.getBoundingClientRect()\r\n           \r\n\r\n            this.ctx = canvasDom.getContext('2d')\r\n            const pixelRatio = this.pixelRatio = this.getPixelRatio(this.ctx)\r\n            canvasDom.width = clientWidth * pixelRatio\r\n            canvasDom.height = clientHeight * pixelRatio\r\n            this.ctx.scale(pixelRatio, pixelRatio)\r\n            // console.log(this.$slots.initial[0].data.attrs.src)\r\n            if (this.defaultImgUrl || this.$slots.defaultImgUrl) {\r\n                const src = this.defaultImgUrl ? this.defaultImgUrl : this.$slots.defaultImgUrl[0].data.attrs.src\r\n                this.createImage(src)\r\n                this.noImage = false\r\n            }\r\n            this.$emit('input', {\r\n                getImage: this.getImage,\r\n                changeImage: this.changeImage\r\n            })           \r\n        }\r\n    }\r\n</script>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","import { render, staticRenderFns } from \"./cropblg.vue?vue&type=template&id=5aff7163&\"\nimport script from \"./cropblg.vue?vue&type=script&lang=js&\"\nexport * from \"./cropblg.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\r\nimport crop from './cropblg.vue';\r\n\r\n// const components = [progresschart];\r\n\r\n// 定义 install 方法\r\nconst install = function (Vue) {\r\n    if (install.installed) return\r\n    install.installed = true\r\n    // 遍历并注册全局组件\r\n    // components.map(component => {\r\n        Vue.component(crop.name, crop)\r\n    // })\r\n}\r\n\r\n//  全局引用可自动安装\r\nif (typeof window !== 'undefined' && window.Vue) {\r\n    install(window.Vue);\r\n}\r\nexport default {\r\n    install,\r\n    crop\r\n};\r\nexport { crop };","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}