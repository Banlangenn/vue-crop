{"version":3,"sources":["webpack://vue-cropbalg/webpack/bootstrap","webpack://vue-cropbalg/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://vue-cropbalg/./packages/cropblg.vue?41c6","webpack://vue-cropbalg/packages/cropblg.vue","webpack://vue-cropbalg/./packages/cropblg.vue?dc1f","webpack://vue-cropbalg/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://vue-cropbalg/./packages/cropblg.vue","webpack://vue-cropbalg/./packages/index.js","webpack://vue-cropbalg/./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"names":["install","Vue","crop","window"],"mappings":"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;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAxBA;;AA0BA;AACA;AACA;;AACA;AAAA;AAAA;AACA;AACA,KAnMA;;AAoMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,KAzMA;;AA0MA;AAAA;AAAA;AAAA;AACA;AACA;AAAA,YACA,eADA;;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AAjBA;;AAmBA;AACA;AACA;;AACA;AAAA;AAAA;AACA;AACA,KAtOA;;AAuOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,UACA,iBADA,CAPA,CASA;;AACA;AACA;AACA;AACA,KApPA;;AAqPA;AACA;AACA;AACA;AACA,oCADA;AAEA;AAFA;AAIA,KA5PA;;AA6PA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,KArQA;;AAsQA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cANA,CAMA;;AACA,iCAPA,CAQA;;AACA,0GATA,CAUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA,KAnSA;;AAoSA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,oBALA,CAMA;;AACA;AACA;AACA,8BACA,yBADA,IAEA,WAFA,IAGA,0BAHA;AAIA,OANA,GAOA;AACA;AACA;AACA,OAVA,CAWA;AAXA,WAYA;AACA;AACA,+BACA,uBADA,IAEA,UAFA,IAGA,wBAHA;AAIA,SANA,GAOA;AACA;AACA;AACA,SAVA,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA,aAuBA,IACA,SACA,WADA,IAEA,yBAFA,IAGA,WAHA,IAIA,0BALA,EAMA;AACA;AACA;AACA;AACA;;AACA;AACA,KA1VA;;AA2VA;AACA;AAAA,YACA,uBADA;AAEA;AACA,KA/VA;;AAgWA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,KAxWA;;AAyWA;AACA;AACA;AAAA,YACA,sBADA;AAAA,YAEA;AACA;AACA;AACA;AACA,WAFA;AAGA,SALA;;AAMA;AACA;AACA;AACA;AACA,aAFA,EAEA,QAFA;AAGA,WAJA;AAKA;;AAZA,OAFA;AAAA,YAgBA,2BAhBA;AAAA,YAiBA,4BAjBA,CAFA,CAoBA;;AACA;AACA;AACA,iDAFA,CAGA;AACA;AACA;;AACA;AACA;AACA,sCA7BA,CA8BA;;AACA,0BACA,aADA,EAEA,+BAFA,EAGA,+BAHA,EAIA,qBAJA,EAKA,sBALA;AAOA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AAAA,kBACA,gDADA;AAEA,gCACA,YADA,EAEA,kCAFA,EAGA,kCAHA,EAIA,KAJA,EAKA,MALA;AAOA;AACA,WAXA;;AAYA;AACA,SA5BA,CA6BA;;;AACA;AAAA,cACA,uDADA;AAAA,cAEA,yCAFA;AAAA,cAGA,0CAHA;AAAA,cAIA,0CAJA;AAAA,cAKA,mDALA,CA9BA,CAoCA;;AACA;AACA,6GAtCA,CAuCA;;AACA;AACA;AACA;;AACA;AACA;AACA,OA7CA;AA8CA,KA7bA;;AA8bA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA,KArcA;;AAscA;AACA;AACA,6DACA,oCADA,IAEA,iCAFA,IAGA,gCAHA,IAIA,+BAJA,IAKA,8BALA,IAKA,CALA;AAMA;AACA,KA/cA;;AAgdA;AACA;AACA;AACA,KAndA;;AAodA;AACA,4BADA,CAEA;;AACA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AAAA;AACA;AACA,OAFA;AAGA,KAheA;;AAieA;AACA;AACA;;AAneA,GAvBA;;AA4fA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA,kBAHA,CAIA;;AACA;AACA,wBADA;AAEA,0BAFA,CAIA;;AAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAlBA,CAmBA;;AACA;AACA;AACA;AACA;;AACA;AACA,6BADA;AAEA;AAFA;AAIA;;AAxhBA,G;;ACzBkT,CAAgB,4GAAG,EAAC,C;;ACAtU;;AAEA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AC5FsF;AAC3B;AACL;;;AAGtD;AACuF;AACvF,gBAAgB,kBAAU;AAC1B,EAAE,wCAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEe,6D;;CCff;AAEA;;AACA,MAAMA,OAAO,GAAG,eAAe;AAC3B,MAAIA,OAAO,CAAX,WAAuB;AACvBA,SAAO,CAAPA,YAF2B,IAE3BA,CAF2B,CAG3B;AACA;;AACIC,KAAG,CAAHA,UAAcC,OAAI,CAAlBD,MALuB,OAKvBA,EALuB,CAM3B;AANJ,E,CASA;;;AACA,IAAI,iCAAiCE,MAAM,CAA3C,KAAiD;AAC7CH,SAAO,CAACG,MAAM,CAAdH,GAAO,CAAPA;AACH;;AACc;AAAA;AAEXE,eAAIA;AAFO,CAAf;;;ACnBA;AAAwB;AACA;AACT,yFAAG;AACI","file":"vue-cropbalg.common.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"mountNode\",staticClass:\"mount-node\",staticStyle:{\"overflow\":\"hidden\"},on:{\"touchstart\":function($event){return _vm.handleStart($event)},\"touchmove\":function($event){return _vm.handleMove($event)}}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.noImage),expression:\"noImage\"}],staticClass:\"no-image-file\",staticStyle:{\"height\":\"100%\",\"display\":\"flex\",\"justify-content\":\"center\",\"align-items\":\"center\",\"background-color\":\"#f1f3f5\",\"flex-wrap\":\"wrap\"},on:{\"click\":_vm.inputHandle,\"touchstart\":function($event){$event.stopPropagation();return (function (){})($event)},\"touchmove\":function($event){$event.stopPropagation();return (function (){})($event)}}},[_vm._t(\"placeholder\",[_c('span',[_vm._v(\"暂时没有图片,请选择图像\")])]),_c('div',{staticStyle:{\"display\":\"none\"}},[_c('input',{attrs:{\"type\":\"file\",\"id\":\"file-input\",\"accept\":\"image/jpeg,image/x-icon,image/png\"},on:{\"change\":_vm.uploadImg}}),_vm._t(\"initial\"),_vm._t(\"watermark\")],2)],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div ref=\"mountNode\" \r\n        class=\"mount-node\" \r\n        @touchstart=\"handleStart($event)\"\r\n        @touchmove=\"handleMove($event)\"\r\n        style=\" overflow: hidden;\"\r\n    >\r\n    <!--  不能绑在wrap 上=== 这样子任何点击都会计算 -后期优化-->\r\n        <div v-show=\"noImage\" @click=\"inputHandle\" class=\"no-image-file\" style=\"height: 100%; display: flex;justify-content: center;align-items: center;background-color: #f1f3f5;flex-wrap: wrap;\"  @touchstart.stop=\"()=>{}\" @touchmove.stop=\"()=>{}\">\r\n            <!-- <span>暂时没有图片,请选择图像</span> -->\r\n            <slot name=\"placeholder\"><span>暂时没有图片,请选择图像</span></slot>\r\n            <div style=\"display:none\">\r\n                <input \r\n                    @change=\"uploadImg\"\r\n                    type=\"file\"\r\n                    id=\"file-input\"\r\n                    accept=\"image/jpeg,image/x-icon,image/png\"\r\n                >\r\n                <slot name=\"initial\"></slot>\r\n                <slot name=\"watermark\"></slot>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'crop',\r\n        props:['imgaeFile','value','position'],\r\n        data() {\r\n            return {\r\n                // ready: false,\r\n                noImage:true,\r\n                ctx: null,\r\n                options: null,\r\n                arg: null,\r\n                scale:1,\r\n                canvas: null,\r\n                image: {},\r\n                points: [],\r\n                lines: [],\r\n                cropper: {},\r\n                startPoint: {},\r\n                nook: {\r\n                    w: 27,\r\n                    h: 27\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            animation(img){\r\n                if (img) {\r\n                    const clientW = img.width,\r\n                    clientH = img.height;\r\n                    const { width, height } = this.options\r\n                    let currentW = clientW,\r\n                        currentH = clientH,\r\n                        k = 1; // contain 时的缩放比\r\n                    // contain 图片\r\n                    if (clientW > width) {\r\n                        currentW = width\r\n                        k = currentW / clientW\r\n                        currentH = k * clientH\r\n                    }\r\n                    if (currentH > height) {\r\n                        currentH = height;\r\n                        k = currentH / clientH\r\n                        currentW = k * clientW\r\n                    }\r\n                    this.image = {\r\n                        element: img,\r\n                        width: currentW,\r\n                        height: currentH,\r\n                        x: (width - currentW) / 2,\r\n                        y: (height - currentH) / 2,\r\n                        clientWidth: clientW,\r\n                        clientHeight: clientH\r\n                    }\r\n                    this.cropper = {\r\n                        x: (width - currentW / 2) / 2,\r\n                        y: (height - currentH / 2) / 2,\r\n                        width: currentW  / 2,\r\n                        height: currentH / 2\r\n                    }\r\n                    this.scale = k\r\n                    this.draw()\r\n                }\r\n            },\r\n            draw() {\r\n                const { width, height } = this.options\r\n                // 避免预览到背景\r\n                this.ctx.clearRect(0, 0, width, height)     \r\n                this.fillBackground()\r\n                this.fillImage()\r\n                this.updatePoint()\r\n                this.fillCropper()\r\n                // this.preview()\r\n            },\r\n            fillImage() {\r\n                const image = this.image;\r\n                const ctx = this.ctx\r\n                ctx.drawImage(image.element, image.x, image.y, image.width, image.height);\r\n            },\r\n            updatePoint() {\r\n                const c = this.cropper;\r\n                let {w, h} =  this.nook\r\n                this.points = [\r\n                    {\r\n                        x: c.x - 3,\r\n                        y: c.y - 3,\r\n                        width: w,\r\n                        height: h\r\n                    },\r\n                    {\r\n                        x: c.x + c.width - w + 3,\r\n                        y: c.y - 3,\r\n                        width: w,\r\n                        height: h\r\n                    },\r\n                    {\r\n                        x: c.x - 3,\r\n                        y: c.y + c.height - h + 3,\r\n                        width: w,\r\n                        height: h\r\n                    },\r\n                    {\r\n                        x: c.x + c.width - w + 3,\r\n                        y: c.y + c.height - h + 3,\r\n                        width: w,\r\n                        height: h\r\n                    }\r\n                ]\r\n                // 寻找四根线\r\n                w = w / .7\r\n                h = h / .7\r\n                this.lines = [\r\n                     {\r\n                        x: c.x,\r\n                        y: c.y - w / 2,\r\n                        width: c.width,\r\n                        height: h\r\n                    },\r\n                    {\r\n                        x: c.x + c.width - w +  w / 2,\r\n                        y: c.y,\r\n                        width: w,\r\n                        height: c.height\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: c.y + c.height - h + w / 2,\r\n                        width: c.width,\r\n                        height: h\r\n                    },\r\n                    {\r\n                        x: c.x - w / 2 ,\r\n                        y: c.y,\r\n                        width: w,\r\n                        height: c.height\r\n                    }\r\n                ]\r\n            },\r\n            fillCropper() {\r\n                const ctx = this.ctx,\r\n                cropper = this.cropper,\r\n                // point = this.point,\r\n                points = this.points\r\n                ctx.strokeStyle = '#fff'\r\n                ctx.lineWidth = 3\r\n                ctx.strokeRect(cropper.x, cropper.y, cropper.width, cropper.height)\r\n           \r\n                ctx.fillStyle = '#fff';\r\n                ctx.fillRect(points[0].x, points[0].y, points[0].width / 4, points[0].height)\r\n                ctx.fillRect(points[0].x, points[0].y, points[0].width, points[0].height / 4)\r\n\r\n                ctx.fillRect(points[1].x + points[1].width / 4 * 3 , points[1].y, points[1].width / 4, points[1].height)\r\n                ctx.fillRect(points[1].x, points[1].y, points[1].width, points[1].height / 4)\r\n\r\n                 ctx.fillRect(points[2].x , points[2].y, points[2].width / 4, points[2].height)\r\n                ctx.fillRect(points[2].x, points[2].y  + points[2].width / 4 * 3, points[2].width, points[2].height / 4)\r\n\r\n                ctx.fillRect(points[3].x + points[3].width / 4 * 3 , points[3].y, points[3].width / 4, points[3].height)\r\n                ctx.fillRect(points[3].x, points[3].y + points[3].width / 4 * 3, points[3].width, points[3].height / 4)\r\n                \r\n            },\r\n           // 填充背景\r\n            fillBackground() {\r\n                // 多个变量可以用逗号 一次赋值\r\n                const { width, height } = this.options\r\n                const ctx = this.ctx,\r\n                side = 15 ,//width / 80,\r\n                x = Math.ceil(width / side),\r\n                y = Math.ceil(height / side)\r\n                // Math.ceil 向上取整\r\n                ctx.save()\r\n                ctx.fillStyle = '#ccc'\r\n                // y方向\r\n                for (let i = 0; i < y; i++) {//  铺满每一行\r\n                    for (let j = 0; j < x; j++) { // 一行的小方格\r\n                        if ((j + i) % 2 === 0) {\r\n                            ctx.fillRect(j * side, i * side, side, side)\r\n                        }\r\n                    }\r\n                }\r\n                //蒙层 \r\n                ctx.fillStyle = 'rgba(0,0,0,0.1)'\r\n                ctx.fillRect(0, 0, width, height)\r\n                 //蒙层 \r\n                ctx.restore()\r\n            },\r\n            handlePointMove({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {}\r\n                switch (this.index) {\r\n                    case 3:\r\n                        newCropper.width = x - cropper.x\r\n                        newCropper.height = y - cropper.y\r\n                        break;\r\n                    case 0:\r\n                        newCropper.width =  (cropper.x + cropper.width) - x\r\n                        newCropper.height =  (cropper.y + cropper.height) - y\r\n                        newCropper.x = x\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 1:\r\n                    // x  不会动\r\n                        newCropper.width =  x - cropper.x\r\n                        newCropper.height =  (cropper.y + cropper.height) - y\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 2:\r\n                    // y 不会动\r\n                        newCropper.width = (cropper.x + cropper.width) - x\r\n                        newCropper.height = y - cropper.y\r\n                        newCropper.x = x\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                if (newCropper.width <= this.nook.w * 2 || newCropper.height <= this.nook.h * 2) {\r\n                    return;\r\n                }\r\n                this.cropper = {...this.cropper,...newCropper}\r\n                this.draw()\r\n            },\r\n            handleImageMove ({ x, y }) {\r\n                const s = this.startPoint\r\n                this.image.x = x - s.offsetX\r\n                this.image.y = y - s.offsetY\r\n                this.draw()\r\n            },\r\n            handleLineMove ({ x, y }) {\r\n                //   console.log('123456')\r\n                const cropper = this.cropper,\r\n                newCropper = {}\r\n                switch (this.index) {\r\n                    case 3:\r\n                        newCropper.width = (cropper.x + cropper.width) - x\r\n                        newCropper.x = x\r\n                        break;\r\n                    case 0:\r\n                        newCropper.height =  (cropper.y + cropper.height) - y\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 1:\r\n                        newCropper.width =  x - cropper.x\r\n                        break;\r\n                    case 2:\r\n                    // y 不会动\r\n                        newCropper.height = y - cropper.y\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                if (newCropper.width <= 30 || newCropper.height <= 30) {\r\n                    return;\r\n                }\r\n                this.cropper = {...this.cropper,...newCropper}\r\n                this.draw()\r\n            },\r\n            handleCropperMove({ x, y }) {\r\n                const { width, height } = this.options;\r\n                const s = this.startPoint;\r\n                const oX = s.offsetX;\r\n                const oY = s.offsetY;\r\n                const maxX = width - this.cropper.width;\r\n                const maxY = height - this.cropper.height;\r\n                let currentX = x - oX,\r\n                currentY = y - oY;\r\n                // 判断边界\r\n                this.cropper.x = this.limit(currentX, 0, maxX)\r\n                this.cropper.y = this.limit(currentY, 0, maxY)\r\n                this.draw()\r\n            },\r\n            getCoordinateByEvent(e){\r\n                const rect = e.target.getBoundingClientRect()\r\n                const touch = e.touches[0]\r\n                return {\r\n                    x: touch.clientX - rect.left,\r\n                    y: touch.clientY - rect.top\r\n                }\r\n            },\r\n            // https://blog.csdn.net/qq_42014697/article/details/80728463  两指缩放\r\n            handleStart(e) {\r\n                if (e.touches.length > 1) {\r\n                    this.startTouches = e.touches\r\n                    this.startPoint.type = null\r\n                    return;\r\n                }\r\n                this.startPoint = this.getPointByCoordinate(this.getCoordinateByEvent(e))\r\n            },\r\n            handleMove (e) {\r\n                const touches = e.touches\r\n                if (touches.length > 1) {\r\n                    e.preventDefault()\r\n                    const image = this.image\r\n                    let startTouches = this.startTouches\r\n                    let width = image.clientWidth\r\n                    let height = image.clientHeight\r\n                    let k; // 最终的缩放系数\r\n                    const scale = this.scale;\r\n                    // const offset = e.deltaY / 800;\r\n                    k = (this.getDistance(touches[0], touches[1]) / this.getDistance(startTouches[0], startTouches[1]))\r\n                    // k = k < 1 ? k / 10 : k * 10\r\n                    k = k < 1 ? 1 / (1 + k / 80) : 1 + Math.abs(k) / 160\r\n                    k = k * scale;\r\n                    this.scale = this.limit(k, 0.02, 4)\r\n                    width *= k;\r\n                    height *= k;\r\n                    image.x += (image.width - width) / 2;\r\n                    image.y += (image.height - height) / 2;\r\n                    image.width = width;\r\n                    image.height = height;\r\n                    this.draw();\r\n                    return\r\n                }\r\n                const type = this.startPoint.type\r\n                if (type) {\r\n                    this[type](this.getCoordinateByEvent(e));\r\n                }\r\n            },\r\n            getPointByCoordinate({x, y}) {\r\n                // const point = this.point;\r\n                // const cropper = this.cropper;\r\n                const image = this.image;\r\n                let t = {}\r\n                let index = 0\r\n                // 四个角移动         \r\n                if (this.points.some((point,i) => {\r\n                    index = i\r\n                    return x > point.x &&\r\n                    x < point.x + point.width &&\r\n                    y > point.y &&\r\n                    y < point.y + point.height\r\n                })\r\n                ) {\r\n                    t.type = 'handlePointMove'\r\n                    this.index = index\r\n                }\r\n                // 四根线移动\r\n                else if (this.lines.some((line,i) => {\r\n                    index = i\r\n                    return x > line.x &&\r\n                    x < line.x + line.width &&\r\n                    y > line.y &&\r\n                    y < line.y + line.height\r\n                }) \r\n                ) {\r\n                    t.type = 'handleLineMove'\r\n                    this.index = index\r\n                }\r\n                // else if (\r\n                // cropper &&\r\n                // x > cropper.x &&\r\n                // x < cropper.x + cropper.width &&\r\n                // y > cropper.y &&\r\n                // y < cropper.y + cropper.height\r\n                // ) {\r\n                // t.offsetX = x - cropper.x;\r\n                // t.offsetY = y - cropper.y;\r\n                // t.type = 'handleCropperMove'\r\n                // }\r\n                // 图片移动\r\n                else if (\r\n                    image &&\r\n                    x > image.x &&\r\n                    x < image.x + image.width &&\r\n                    y > image.y &&\r\n                    y < image.y + image.height\r\n                ) {\r\n                    t.offsetX = x - image.x\r\n                    t.offsetY = y - image.y\r\n                    t.type = 'handleImageMove'\r\n                }\r\n                return t\r\n            },\r\n            getDistance(p1, p2) {\r\n                const x = p2.pageX - p1.pageX,\r\n                    y = p2.pageY - p1.pageY\r\n                return Math.sqrt((x * x) + (y * y))\r\n            },\r\n            limit(value, min, max) {\r\n                if (value < min) {\r\n                    return min\r\n                }\r\n                if (value > max) {\r\n                    return max\r\n                }\r\n                return value\r\n            },\r\n            getImage(type='Base64', mimeType='image/jpeg', quality=1) {\r\n                if (this.noImage) return\r\n                const image = this.image,\r\n                cropper = this.cropper,\r\n                types = {\r\n                    Base64(canvas, mimeType) {\r\n                        return new Promise((resolve) => {\r\n                            resolve(canvas.toDataURL(mimeType))\r\n                        })\r\n                    },\r\n                    Blob(canvas, mimeType){\r\n                        return new Promise((resolve) => {\r\n                            canvas.toBlob((blob)=> {\r\n                                resolve(blob)\r\n                            }, mimeType)\r\n                        })\r\n                    } \r\n                },\r\n                w = cropper.width * quality,\r\n                h = cropper.height * quality\r\n                // 变量申请\r\n                if (!this.canvas) {\r\n                    this.canvas = document.createElement('canvas')\r\n                    this.cCtx = this.canvas.getContext('2d')\r\n                    // const { mountNode } = this.$refs\r\n                    // mountNode.appendChild(this.canvas)\r\n                }\r\n                this.canvas.width = w\r\n                this.canvas.height = h\r\n                this.cCtx.clearRect(0, 0, w, h)\r\n                // -------------\r\n                this.cCtx.drawImage(\r\n                    image.element,\r\n                    (image.x - cropper.x) * quality,\r\n                    (image.y - cropper.y) * quality,\r\n                    image.width * quality,\r\n                    image.height * quality\r\n                )\r\n                return new Promise((resolve, reject) => {\r\n                    if(!types[type]) {\r\n                        reject('type= Blob || Base64')\r\n                        return  \r\n                    } \r\n                    if (!this.$slots.watermark) {\r\n                        resolve(types[type](this.canvas, mimeType))\r\n                        return\r\n                    }\r\n                    const [left = '50%', top = '50%', size = 1] = this.position\r\n                    const isImg = this.$slots.watermark && this.$slots.watermark[0].tag === 'img'\r\n                    if (isImg) {\r\n                        let watermarkImg = new Image()\r\n                        watermarkImg.src = this.$slots.watermark[0].data.attrs.src\r\n                        watermarkImg.crossOrigin = 'anonymous'\r\n                        watermarkImg.onload = () => { // 等到图片加载进来之后\r\n                            const width = watermarkImg.width * size * this.scale,\r\n                            height = watermarkImg.height * size * this.scale;\r\n                            this.cCtx.drawImage(\r\n                                watermarkImg,\r\n                                (w - width) * parseInt(left) / 100,\r\n                                (h - height) * parseInt(top) / 100,\r\n                                width,\r\n                                height\r\n                            )\r\n                            resolve(types[type](this.canvas, mimeType))\r\n                        }\r\n                        return\r\n                    }\r\n                    // console.log(this.$slots.watermark)\r\n                    const height = 12 * size,\r\n                    text = this.$slots.watermark[0].text.trim()  || '请直接放文字',\r\n                    width = this.cCtx.measureText(text).width,\r\n                    x = (w - width * 2) * parseInt(left) / 100,\r\n                    y = (h + height / 2) *parseInt(top) / 100,\r\n                    colorData = this.cCtx.getImageData(x, y, 1, 1).data\r\n                    // 变量申请\r\n                    this.cCtx.font = 12 * size + 'px Georgia'\r\n                    this.cCtx.fillStyle =  `rgba(${255 - colorData[0]}, ${255 - colorData[1]}, ${255 - colorData[2]}, 1)`\r\n                    // console.log(this.cCtx.fillStyle)\r\n                    if(this.cCtx.fillStyle === '#ffffff') {\r\n                        this.cCtx.fillStyle = '#000'\r\n                    }\r\n                    this.cCtx.fillText(text, x, y)\r\n                    resolve(types[type](this.canvas, mimeType))\r\n                })\r\n            },\r\n            changeImage(imgAddress) {\r\n                if (this.noImage) return\r\n                if (imgAddress) {\r\n                    this.createImage(imgAddress)\r\n                    return\r\n                }\r\n                this.inputHandle()\r\n            },\r\n            // 工具\r\n            getPixelRatio(context) {\r\n                const backingStore = context.backingStorePixelRatio ||\r\n                context.webkitBackingStorePixelRatio ||\r\n                context.mozBackingStorePixelRatio ||\r\n                context.msBackingStorePixelRatio ||\r\n                context.oBackingStorePixelRatio ||\r\n                context.backingStorePixelRatio || 1\r\n                return (window.devicePixelRatio || 1) / backingStore\r\n            },\r\n            uploadImg(e) {\r\n                this.createImage(e.target.files[0])\r\n                this.noImage = false\r\n            },\r\n            createImage(imgfile) {\r\n                let img = new Image()\r\n                //  url , imgsrc, 文件  三种情况\r\n                let src = imgfile\r\n                if (Object.prototype.toString.call(imgfile) === '[object File]') {\r\n                   src = window.URL.createObjectURL(imgfile)\r\n                }\r\n                img.crossOrigin = 'anonymous'\r\n                img.src = src\r\n                img.onload = () => { // 等到图片加载进来之后\r\n                    this.animation(img)\r\n                }\r\n            },\r\n            inputHandle() {\r\n                document.getElementById('file-input').click()\r\n            }\r\n        },\r\n        mounted() {\r\n            // 解决 字体模糊\r\n            const { mountNode } = this.$refs\r\n            const { clientWidth, clientHeight } = mountNode\r\n            // p可以优化\r\n            this.options = {\r\n                width: clientWidth,\r\n                height: clientHeight\r\n            }\r\n            // canvas dom\r\n            let canvasDom =  document.createElement('canvas')\r\n            canvasDom.style.width =  clientWidth + 'px'\r\n            canvasDom.style.height = clientHeight + 'px'\r\n            mountNode.appendChild(canvasDom)\r\n            this.ctx = canvasDom.getContext('2d')\r\n            const pixelRatio = this.getPixelRatio(this.ctx)\r\n            canvasDom.width = clientWidth * pixelRatio\r\n            canvasDom.height = clientHeight * pixelRatio\r\n            this.ctx.scale(pixelRatio, pixelRatio)\r\n            // console.log(this.$slots.initial[0].data.attrs.src)\r\n            if (this.$slots.initial) {\r\n                this.createImage(this.$slots.initial[0].data.attrs.src)\r\n                this.noImage = false\r\n            }\r\n            this.$emit('input', {\r\n                getImage: this.getImage,\r\n                changeImage: this.changeImage\r\n            })           \r\n        }\r\n    }\r\n</script>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","import { render, staticRenderFns } from \"./cropblg.vue?vue&type=template&id=84f7d6ac&\"\nimport script from \"./cropblg.vue?vue&type=script&lang=js&\"\nexport * from \"./cropblg.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\r\nimport crop from './cropblg.vue';\r\n\r\n// const components = [progresschart];\r\n\r\n// 定义 install 方法\r\nconst install = function (Vue) {\r\n    if (install.installed) return\r\n    install.installed = true\r\n    // 遍历并注册全局组件\r\n    // components.map(component => {\r\n        Vue.component(crop.name, crop)\r\n    // })\r\n}\r\n\r\n//  全局引用可自动安装\r\nif (typeof window !== 'undefined' && window.Vue) {\r\n    install(window.Vue);\r\n}\r\nexport default {\r\n    install,\r\n    crop\r\n};\r\nexport { crop };","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}