{"version":3,"sources":["webpack://vue-cropblg/webpack/universalModuleDefinition","webpack://vue-cropblg/webpack/bootstrap","webpack://vue-cropblg/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://vue-cropblg/./packages/cropblg.vue?a088","webpack://vue-cropblg/packages/cropblg.vue","webpack://vue-cropblg/./packages/cropblg.vue?dc1f","webpack://vue-cropblg/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://vue-cropblg/./packages/cropblg.vue","webpack://vue-cropblg/./packages/index.js","webpack://vue-cropblg/./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","document","currentScript","src","match","render","_vm","_h","$createElement","_c","_self","ref","staticClass","staticStyle","overflow","on","touchstart","$event","handleStart","touchmove","handleMove","directives","rawName","expression","height","display","justify-content","align-items","flex-wrap","click","inputHandle","stopPropagation","_t","_v","attrs","type","id","accept","change","uploadImg","staticRenderFns","cropblgvue_type_script_lang_js_","props","[object Object]","noImage","ctx","options","pixelRatio","scale","canvas","image","points","lines","cropper","startPoint","touchBar","nookSide","rotateAngle","methods","img","clientW","width","clientH","currentW","currentH","k","minNum","element","x","y","clientWidth","clientHeight","draw","clearRect","fillBackground","fillImage","averageColor","getImageColor","getImageData","data","updatePoint","fillCropper","angle","drawTouchBar","color","alpha","h1","h2","lineWidth","fillStyle","fillRect","strokeStyle","beginPath","arc","Math","PI","stroke","x1","sin","y1","cos","x2","y2","x0","y0","moveTo","lineTo","fill","canvasRotate","cWidth","cHeight","forecastX","forecastY","diffX","diffY","lineHeight","halfLineHeight","strokeRect","forEach","index","save","translate","rotate","restore","side","ceil","j","touchX","touchY","cropperWidth","cropperHeight","cropperX","cropperY","newCropper","getNewCropper","renderCropper","offsetX","offsetY","e","rect","target","getBoundingClientRect","touch","touches","coordinate","clientX","left","clientY","top","preventDefault","length","startTouches","getPointByCoordinate","getCoordinateByEvent","getDistance","abs","limit","checkRegion","some","point","line","p1","p2","pageX","pageY","sqrt","min","max","mimeType","quality","types","Promise","resolve","toDataURL","toBlob","blob","w","h","createElement","cCtx","getContext","reject","size","position","imageWatermark","watermarkImg","Image","getFileSrc","crossOrigin","onload","imgX","parseInt","imgY","textWatermark","font","text","measureText","textX","textY","halfHeight","halfWidth","drawImage","fillText","imgAddress","createImage","context","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","devicePixelRatio","files","toString","URL","createObjectURL","imgfile","animation","getElementById","g","b","num","row","col","round","mountNode","$refs","canvasDom","style","appendChild","getPixelRatio","defaultImgUrl","$slots","$emit","getImage","changeImage","packages_cropblgvue_type_script_lang_js_","normalizeComponent","scriptExports","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","_compiled","functional","_scopeId","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","existing","beforeCreate","concat","component","cropblg","install","Vue","installed","crop","packages_0","__webpack_exports__"],"mappings":"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","file":"vue-cropblg.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-cropblg\"] = factory();\n\telse\n\t\troot[\"vue-cropblg\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"mountNode\",staticClass:\"mount-node\",staticStyle:{\"overflow\":\"hidden\"},on:{\"touchstart\":function($event){return _vm.handleStart($event)},\"touchmove\":function($event){return _vm.handleMove($event)}}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.noImage),expression:\"noImage\"}],staticClass:\"no-image-file\",staticStyle:{\"height\":\"100%\",\"display\":\"flex\",\"justify-content\":\"center\",\"align-items\":\"center\",\"flex-wrap\":\"wrap\"},on:{\"click\":_vm.inputHandle,\"touchstart\":function($event){$event.stopPropagation();return (function (){})($event)},\"touchmove\":function($event){$event.stopPropagation();return (function (){})($event)}}},[_vm._t(\"placeholder\",[_c('span',[_vm._v(\"暂时没有图片,请选择图像\")])]),_c('div',{staticStyle:{\"display\":\"none\"}},[_c('input',{attrs:{\"type\":\"file\",\"id\":\"file-input\",\"accept\":\"image/jpeg,image/x-icon,image/png\"},on:{\"change\":_vm.uploadImg}}),_vm._t(\"defaultImgUrl\")],2)],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div ref=\"mountNode\" \r\n        class=\"mount-node\" \r\n        @touchstart=\"handleStart($event)\"\r\n        @touchmove=\"handleMove($event)\"\r\n        style=\" overflow: hidden;\"\r\n    >\r\n    <!--  不能绑在wrap 上=== 这样子任何点击都会计算 -后期优化-->\r\n        <div v-show=\"noImage\" @click=\"inputHandle\" class=\"no-image-file\" style=\"height: 100%; display: flex;justify-content: center;align-items: center;flex-wrap: wrap;\"  @touchstart.stop=\"()=>{}\" @touchmove.stop=\"()=>{}\">\r\n            <!-- <span>暂时没有图片,请选择图像</span> -->\r\n            <slot name=\"placeholder\"><span>暂时没有图片,请选择图像</span></slot>\r\n            <div style=\"display:none\">\r\n                <input \r\n                    @change=\"uploadImg\"\r\n                    type=\"file\"\r\n                    id=\"file-input\"\r\n                    accept=\"image/jpeg,image/x-icon,image/png\"\r\n                >\r\n                <slot name=\"defaultImgUrl\"></slot>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'crop',\r\n        props:['value', 'position', 'textWatermark', 'imageWatermark', 'defaultImgUrl', 'color', 'angle'],\r\n        data() {\r\n            return {\r\n                // ready: false,\r\n                noImage: true,\r\n                ctx: null,\r\n                options: null,\r\n                pixelRatio: null,\r\n                scale:1,\r\n                canvas: null,\r\n                image: {},\r\n                points: [],\r\n                lines: [],\r\n                cropper: {},\r\n                startPoint: {},\r\n                touchBar: {},\r\n                nookSide: 30,\r\n                rotateAngle: 0\r\n            }\r\n        },\r\n        methods: {\r\n            animation(img){\r\n                if (img) {\r\n                    const clientW = img.width,\r\n                    clientH = img.height;\r\n                    const { width, height } = this.options\r\n                    let currentW = clientW,\r\n                        currentH = clientH,\r\n                        k = 1; // contain 时的缩放比\r\n                    // contain 图片\r\n                    if (clientW > width) {\r\n                        currentW = width\r\n                        k = currentW / clientW\r\n                        currentH = k * clientH\r\n                    }\r\n                    if (currentH > height) {\r\n                        currentH = height;\r\n                        k = currentH / clientH\r\n                        currentW = k * clientW\r\n                    }\r\n                    // 针对小图片\r\n                    const minNum = 100\r\n                    if (clientW < minNum) {\r\n                        currentW = minNum\r\n                        k = currentW / clientW\r\n                        currentH = k * clientH\r\n                    }\r\n                    if (currentH < minNum) {\r\n                        currentH = minNum;\r\n                        k = currentH / clientH\r\n                        currentW = k * clientW\r\n                    }\r\n                    // 针对小图片\r\n                    this.image = {\r\n                        element: img,\r\n                        width: currentW,\r\n                        height: currentH,\r\n                        x: (width - currentW) / 2,\r\n                        y: (height - currentH) / 2,\r\n                        clientWidth: clientW,\r\n                        clientHeight: clientH\r\n                    }\r\n                    this.cropper = {\r\n                        x: (width - currentW / 2) / 2,\r\n                        y: (height - currentH / 2) / 2,\r\n                        width: currentW  / 2,\r\n                        height: currentH / 2\r\n                    }\r\n                    this.touchBar = {\r\n                        x: width - 60 - 14,\r\n                        y: 10,\r\n                        width: 60,\r\n                        height: 60\r\n                    }\r\n                    this.scale = k\r\n                    this.draw()\r\n                }\r\n            },\r\n            draw() {\r\n                const { width, height } = this.options\r\n                // 避免预览到背景\r\n                this.ctx.clearRect(0, 0, width, height)\r\n                // console.time('fillBackground')  \r\n                this.fillBackground()\r\n                // console.timeEnd('fillBackground')\r\n                // console.time('fillImage')\r\n                this.fillImage()\r\n                if (!this.averageColor) {\r\n                   this.averageColor = this.getImageColor(this.ctx.getImageData(this.cropper.x,  this.cropper.y, 50, 50).data)\r\n                }\r\n                // console.timeEnd('fillImage')\r\n                // console.time('updatePoint')\r\n                this.updatePoint()\r\n                // console.timeEnd('updatePoint')\r\n                //  console.time('fillCropper')\r\n                this.fillCropper()\r\n                // console.timeEnd('fillCropper')\r\n                //  console.time('drawTouchBar')\r\n                 if (this.angle) {\r\n                     this.drawTouchBar()\r\n                 }\r\n                // console.timeEnd('drawTouchBar')\r\n                // this.preview()\r\n            },\r\n            drawTouchBar() {\r\n                const ctx = this.ctx,\r\n                touchBar = this.touchBar,\r\n                color = this.color || this.averageColor,\r\n                x = touchBar.x + touchBar.width * 0.6,\r\n                y =  touchBar.y + touchBar.height * 0.64,\r\n                r = touchBar.width * 0.41,\r\n                alpha = 6,\r\n                h1 = touchBar.width * 0.1,\r\n                h2 =  touchBar.width * 0.18\r\n                ctx.lineWidth = 2\r\n                // ctx.fillStyle = '#000';\r\n                // ctx.fillRect(touchBar.x, touchBar.y, touchBar.width, touchBar.height)\r\n                ctx.fillStyle = color\r\n                ctx.fillRect(x - touchBar.width / 6, y - touchBar.height / 6, touchBar.width * 0.43, touchBar.height * 0.43)\r\n                ctx.strokeStyle = color\r\n                ctx.beginPath()\r\n                ctx.arc(x, y, r, Math.PI/180 * 180, -Math.PI/2 + alpha, false)\r\n                ctx.stroke()\r\n                if(alpha < 2*Math.PI) {\r\n                    const x1 = x + (r - h1) * Math.sin(alpha),\r\n                    y1 = y - (r - h1) * Math.cos(alpha),\r\n                    x2 = x + (r + h1) * Math.sin(alpha),\r\n                    y2 = y - (r + h1) * Math.cos(alpha),\r\n                    x0 = (x1 + x2) / 2 + h2 * Math.sin(alpha + Math.PI/2),\r\n                    y0 = (y1 + y2) / 2 - h2 * Math.cos(alpha + Math.PI/2)\r\n                    ctx.beginPath()\r\n                    ctx.moveTo(x0, y0)\r\n                    ctx.lineTo(x1, y1)\r\n                    ctx.lineTo(x2, y2)\r\n                    ctx.fill()\r\n                }\r\n            },\r\n            fillImage() {\r\n                const image = this.image;\r\n                const ctx = this.ctx\r\n                const rotateAngle = this.rotateAngle || 0\r\n                this.canvasRotate('img', ctx, image.element, rotateAngle, image.x, image.y, image.width, image.height)\r\n                // ctx.drawImage(image.element, image.x, image.y, image.width, image.height)\r\n            },\r\n            updatePoint() {\r\n                // 点中点和线 不用 执行 \r\n                const c = this.cropper;\r\n                const nookSide =  this.nookSide,\r\n                cWidth = c.x + c.width,\r\n                cHeight = c.y + c.height,\r\n                forecastX = cWidth - nookSide,\r\n                forecastY = cHeight - nookSide\r\n                this.points = [\r\n                    {\r\n                        x: c.x,\r\n                        y: c.y,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: 0,\r\n                        diffY: 0\r\n                    },\r\n                    {\r\n                        x: forecastX ,\r\n                        y: c.y,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: nookSide,\r\n                        diffY: 0\r\n                    },\r\n                    {\r\n                        x: forecastX ,\r\n                        y: forecastY,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: nookSide,\r\n                        diffY: nookSide\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: forecastY,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: 0,\r\n                        diffY: nookSide\r\n                    }\r\n                ]\r\n                // 寻找四根线\r\n                const lineHeight = nookSide / .7 / 2,\r\n                halfLineHeight = lineHeight / 2\r\n                this.lines = [\r\n                     {\r\n                        x: c.x,\r\n                        y: c.y - halfLineHeight,\r\n                        width: c.width,\r\n                        height: lineHeight\r\n                    },\r\n                    {\r\n                        x: cWidth - halfLineHeight,\r\n                        y: c.y,\r\n                        width: lineHeight,\r\n                        height: c.height\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: cHeight - halfLineHeight,\r\n                        width: c.width,\r\n                        height: lineHeight\r\n                    },\r\n                    {\r\n                        x: c.x - halfLineHeight,\r\n                        y: c.y,\r\n                        width: lineHeight,\r\n                        height: c.height\r\n                    }\r\n                ]\r\n            },\r\n            fillCropper() {\r\n                const ctx = this.ctx,\r\n                cropper = this.cropper,\r\n                points = this.points,\r\n                color = this.color || this.averageColor\r\n                ctx.strokeStyle = color\r\n                ctx.lineWidth = 2\r\n                ctx.strokeRect(cropper.x, cropper.y, cropper.width, cropper.height)\r\n                ctx.fillStyle = color\r\n                const nookSide = this.nookSide / 8\r\n                points.forEach((element, index) => {\r\n                    ctx.save()\r\n                    ctx.translate(element.x + element.diffX, element.y + element.diffY)\r\n                    ctx.rotate(index * 90 * (Math.PI/180))\r\n                    ctx.fillRect(-nookSide, -nookSide, element.height, nookSide * 2)\r\n                    ctx.fillRect(-nookSide, -nookSide, nookSide * 2, element.width)\r\n                    // if(index % 2 === 0){\r\n                    //     ctx.fillRect(-nookSide, cropper.height / 2 - element.nookSide , element.nookSide / 4, element.nookSide * 2)\r\n                    // } else {\r\n                    //     ctx.fillRect(-nookSide, cropper.width / 2 - element.nookSide, element.nookSide / 4, element.nookSide * 2)\r\n                    // }\r\n                    ctx.restore()\r\n                });\r\n               \r\n\r\n            },\r\n           // 填充背景\r\n            fillBackground() {\r\n                // 多个变量可以用逗号 一次赋值\r\n                const { width, height } = this.options\r\n                const ctx = this.ctx,\r\n                side = 30 ,//width / 80,\r\n                x = Math.ceil(width / side),\r\n                y = Math.ceil(height / side)\r\n                // Math.ceil 向上取整\r\n                ctx.save()\r\n                ctx.fillStyle = '#ccc'\r\n                // y方向\r\n                for (let i = 0; i < y; i++) {//  铺满每一行\r\n                    for (let j = 0; j < x; j++) { // 一行的小方格\r\n                        if ((j + i) % 2 === 0) {\r\n                            ctx.fillRect(j * side, i * side, side, side)\r\n                        }\r\n                    }\r\n                }\r\n                //蒙层 \r\n                ctx.fillStyle = 'rgba(0, 0, 0, .1)'\r\n                ctx.fillRect(0, 0, width, height)\r\n                 //蒙层 \r\n                ctx.restore()\r\n            },\r\n            getNewCropper(touchX, touchY ,cropper) {\r\n               return {\r\n                    cropperWidth:(cropper.x + cropper.width) - touchX,\r\n                    cropperHeight: (cropper.y + cropper.height) - touchY,\r\n                    cropperX: touchX - cropper.x,\r\n                    cropperY: touchY - cropper.y\r\n               }\r\n            },\r\n            handlePointMove({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {},\r\n                { cropperWidth, cropperHeight, cropperX, cropperY } = this.getNewCropper(x, y, cropper)\r\n                switch (this.index) {\r\n                    case 0:\r\n                        newCropper.width =  cropperWidth\r\n                        newCropper.height = cropperHeight\r\n                        newCropper.x = x\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 1:\r\n                    // x  不会动\r\n                        newCropper.width =  cropperX\r\n                        newCropper.height =  cropperHeight\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 3:\r\n                    // y 不会动\r\n                        newCropper.width = cropperWidth\r\n                        newCropper.height = cropperY\r\n                        newCropper.x = x\r\n                        break;\r\n                    case 2:\r\n                        newCropper.width = cropperX\r\n                        newCropper.height = cropperY\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.renderCropper(newCropper)\r\n            },\r\n            handleLineMove ({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {},\r\n                { cropperWidth, cropperHeight, cropperX, cropperY } = this.getNewCropper(x, y, cropper)\r\n                switch (this.index) {\r\n                    case 3:\r\n                        newCropper.width = cropperWidth\r\n                        newCropper.x = x // 限制\r\n                        break;\r\n                    case 0:\r\n                        newCropper.height = cropperHeight\r\n                        newCropper.y = y // 限制\r\n                        break;\r\n                    case 1:\r\n                        newCropper.width = cropperX\r\n                        break;\r\n                    case 2:\r\n                    // y 不会动\r\n                        newCropper.height = cropperY\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.renderCropper(newCropper)\r\n            },\r\n            renderCropper(newCropper) {\r\n                 if (newCropper.width <= this.nookSide * 4 || newCropper.height <= this.nookSide * 4) {\r\n                    return\r\n                }\r\n                this.cropper = {...this.cropper,...newCropper}\r\n                this.draw()\r\n            },\r\n            handleImageMove ({ x, y }) {\r\n                const s = this.startPoint\r\n                this.image.x = x - s.offsetX\r\n                this.image.y = y - s.offsetY\r\n                this.draw()\r\n            },\r\n            // handleCropperMove({ x, y }) {\r\n            //     const { width, height } = this.options;\r\n            //     const s = this.startPoint;\r\n            //     const oX = s.offsetX;\r\n            //     const oY = s.offsetY;\r\n            //     const maxX = width - this.cropper.width;\r\n            //     const maxY = height - this.cropper.height;\r\n            //     let currentX = x - oX,\r\n            //     currentY = y - oY;\r\n            //     // 判断边界\r\n            //     this.cropper.x = this.limit(currentX, 0, maxX)\r\n            //     this.cropper.y = this.limit(currentY, 0, maxY)\r\n            //     this.draw()\r\n            // },\r\n            getCoordinateByEvent(e){\r\n                const rect = e.target.getBoundingClientRect(),\r\n                touch = e.touches[0],\r\n                coordinate = {\r\n                    x: touch.clientX - rect.left,\r\n                    y: touch.clientY - rect.top\r\n                },\r\n                { width, height } = this.options\r\n                // move 到边\r\n                if (coordinate.x <= 2 || coordinate.y <= 2 || coordinate.x >= width - 2 || coordinate.y >= height - 2) return\r\n                return coordinate\r\n            },\r\n            // https://blog.csdn.net/qq_42014697/article/details/80728463  两指缩放\r\n            handleStart(e) {\r\n                e.preventDefault()\r\n                if (e.touches.length > 1) {\r\n                    this.startTouches = e.touches\r\n                    this.startPoint.type = null\r\n                    return;\r\n                }\r\n                this.startPoint = this.getPointByCoordinate(this.getCoordinateByEvent(e))\r\n            },\r\n            handleMove (e) {\r\n                e.preventDefault()\r\n                const touches = e.touches\r\n                if (touches.length > 1) {\r\n                    const image = this.image\r\n                    let startTouches = this.startTouches\r\n                    let k; // 最终的缩放系数\r\n                    const scale = this.scale;\r\n                    // const offset = e.deltaY / 800;\r\n                    k = (this.getDistance(touches[0], touches[1]) / this.getDistance(startTouches[0], startTouches[1]))\r\n                    // k = k < 1 ? k / 10 : k * 10\r\n                    k = k < 1 ? 1 / (1 + k / 80) : 1 + Math.abs(k) / 160\r\n                    k = k * scale;\r\n                    this.scale = this.limit(k, 0.02, 4)\r\n                    const width = image.clientWidth * this.scale,\r\n                    height = image.clientHeight * this.scale\r\n                    this.image.x += (image.width - width) / 2\r\n                    this.image.y += (image.height - height) / 2\r\n                    this.image.width = width\r\n                    this.image.height = height\r\n                    this.draw()\r\n                    return\r\n                }\r\n                const type = this.startPoint.type\r\n                if (type && this.getCoordinateByEvent(e)) {\r\n                    this[type](this.getCoordinateByEvent(e))\r\n                }\r\n            },\r\n            checkRegion(x,y,target) {\r\n                return x > target.x &&\r\n                    x < target.x + target.width &&\r\n                    y > target.y &&\r\n                    y < target.y + target.height\r\n            },\r\n            getPointByCoordinate({x, y}) {\r\n                const image = this.image,\r\n                touchBar = this.touchBar\r\n                let t = {}\r\n                let index = 0\r\n                if (this.checkRegion(x,y,touchBar)) {\r\n                    this.rotateAngle =  (this.rotateAngle + this.angle ) % 360\r\n                    this.draw()\r\n                }  \r\n                // 四个角移动         \r\n                else if (this.points.some((point,i) => {\r\n                    index = i\r\n                    return this.checkRegion(x,y,point)\r\n                })\r\n                ) {\r\n                    t.type = 'handlePointMove'\r\n                    this.index = index\r\n                }\r\n                // 四根线移动\r\n                else if (this.lines.some((line,i) => {\r\n                    index = i\r\n                    return this.checkRegion(x,y,line)\r\n                }) \r\n                ) {\r\n                    t.type = 'handleLineMove'\r\n                    this.index = index\r\n                }\r\n                // else if (\r\n                // cropper &&\r\n                // x > cropper.x &&\r\n                // x < cropper.x + cropper.width &&\r\n                // y > cropper.y &&\r\n                // y < cropper.y + cropper.height\r\n                // ) {\r\n                // t.offsetX = x - cropper.x;\r\n                // t.offsetY = y - cropper.y;\r\n                // t.type = 'handleCropperMove'\r\n                // }\r\n                // 图片移动\r\n                else if (this.checkRegion(x,y,image)) {\r\n                    t.offsetX = x - image.x\r\n                    t.offsetY = y - image.y\r\n                    t.type = 'handleImageMove'\r\n                }\r\n                return t\r\n            },\r\n            getDistance(p1, p2) {\r\n                const x = p2.pageX - p1.pageX,\r\n                    y = p2.pageY - p1.pageY\r\n                return Math.sqrt((x * x) + (y * y))\r\n            },\r\n            limit(value, min, max) {\r\n                if (value < min) {\r\n                    return min\r\n                }\r\n                if (value > max) {\r\n                    return max\r\n                }\r\n                return value\r\n            },\r\n            getImage(type='Base64', mimeType='image/jpeg', quality=1) {\r\n                if (this.noImage) return\r\n                const image = this.image,\r\n                cropper = this.cropper,\r\n                pixelRatio = this.pixelRatio,\r\n                types = {\r\n                    Base64(canvas, mimeType) {\r\n                        return new Promise((resolve) => {\r\n                            resolve(canvas.toDataURL(mimeType))\r\n                        })\r\n                    },\r\n                    Blob(canvas, mimeType){\r\n                        return new Promise((resolve) => {\r\n                            canvas.toBlob((blob)=> {\r\n                                resolve(blob)\r\n                            }, mimeType)\r\n                        })\r\n                    } \r\n                },\r\n                w = cropper.width * quality ,\r\n                h = cropper.height * quality \r\n                // 变量申请\r\n                if (!this.canvas) {\r\n                    this.canvas = document.createElement('canvas')\r\n                    this.cCtx = this.canvas.getContext('2d')\r\n                    // const { mountNode } = this.$refs\r\n                    // mountNode.appendChild(this.canvas)\r\n                }\r\n                const cCtx = this.cCtx\r\n                this.canvas.width = w * pixelRatio\r\n                this.canvas.height = h * pixelRatio\r\n                cCtx.scale(pixelRatio, pixelRatio)\r\n                cCtx.clearRect(0, 0, w, h)\r\n                const rotateAngle = this.rotateAngle || 0\r\n                this.canvasRotate('img', cCtx, image.element,\r\n                    rotateAngle,\r\n                    (image.x - cropper.x)  * quality,\r\n                    (image.y - cropper.y)  * quality,\r\n                    image.width* quality,\r\n                    image.height* quality\r\n                )\r\n                // -------------\r\n                // cCtx.drawImage(\r\n                //     image.element,\r\n                //     (image.x - cropper.x)  * quality , //  是负数\r\n                //     (image.y - cropper.y)  * quality, // 负数\r\n                //     image.width * quality ,\r\n                //     image.height * quality\r\n                // )\r\n                return new Promise((resolve, reject) => {\r\n                    if(!types[type]) {\r\n                        reject('type = Blob || Base64')\r\n                        return  \r\n                    }\r\n                    const [left = '50%', top = '50%', size = 1, angle = 0] = this.position\r\n                    // angle = this.angle || 0\r\n                    if (this.imageWatermark) {\r\n                        let watermarkImg = new Image()\r\n                        watermarkImg.src = this.getFileSrc(this.imageWatermark)\r\n                        watermarkImg.crossOrigin = 'anonymous'\r\n                        watermarkImg.onload = () => { // 等到图片加载进来之后\r\n                            const width = watermarkImg.width * size * quality,\r\n                            height = watermarkImg.height * size * quality,\r\n                            imgX  = ( w - width ) * parseInt(left) / 100 ,\r\n                            imgY =  (h - height) * parseInt(top) / 100\r\n                            this.canvasRotate('img', cCtx, watermarkImg, angle, imgX, imgY, width, height)\r\n                            resolve(types[type](this.canvas, mimeType))\r\n                        }\r\n                        return\r\n                    }             \r\n                    if (this.textWatermark) {\r\n                        const height = this.limit(12 * size, 12, 100)\r\n                        cCtx.font = height + 'px Georgia'\r\n                        const text = this.textWatermark,\r\n                        width = cCtx.measureText(text).width,\r\n                        textX = (w - width * 1.031 )  * parseInt(left) / 100,\r\n                        textY = (h - height * 2.82)  * parseInt(top) / 100\r\n                        // 变量申请\r\n                        cCtx.fillStyle = this.color || this.averageColor\r\n                        // console.log(this.cCtx.fillStyle)\r\n                        if(cCtx.fillStyle === '#ffffff') {\r\n                            cCtx.fillStyle = '#000'\r\n                        }\r\n                        this.canvasRotate('text', cCtx, text, angle, textX, textY, width, height)\r\n                        resolve(types[type](this.canvas, mimeType))\r\n                        return\r\n                    }\r\n                    resolve(types[type](this.canvas, mimeType))\r\n                })\r\n            },\r\n            canvasRotate(type, ctx, target, angle, x, y, width,height) {\r\n                ctx.save()\r\n                const halfHeight = height / 2,\r\n                halfWidth = width / 2\r\n                ctx.translate(x + halfWidth, y + halfHeight)\r\n                ctx.rotate(Math.PI / 180 * angle)\r\n                if (type === 'img') {\r\n                    ctx.drawImage(\r\n                        target,\r\n                        -halfWidth,\r\n                        -halfHeight,\r\n                        width,\r\n                        height\r\n                    )\r\n                } else {\r\n                    ctx.fillText(target, -halfWidth , -halfHeight)\r\n                }\r\n                ctx.restore()\r\n            },\r\n            changeImage(imgAddress) {\r\n                if (this.noImage) return\r\n                this.averageColor = null\r\n                if (imgAddress) {\r\n                    this.createImage(imgAddress)\r\n                    return\r\n                }\r\n                this.inputHandle()\r\n            },\r\n            // 工具\r\n            getPixelRatio(context) {\r\n                const backingStore = context.backingStorePixelRatio ||\r\n                context.webkitBackingStorePixelRatio ||\r\n                context.mozBackingStorePixelRatio ||\r\n                context.msBackingStorePixelRatio ||\r\n                context.oBackingStorePixelRatio ||\r\n                context.backingStorePixelRatio || 1\r\n                return (window.devicePixelRatio || 1) / backingStore\r\n            },\r\n            uploadImg(e) {\r\n                this.createImage(e.target.files[0])\r\n                this.noImage = false\r\n            },\r\n            getFileSrc(src) {\r\n                if (Object.prototype.toString.call(src) === '[object File]') {\r\n                   src = window.URL.createObjectURL(src)\r\n                }\r\n                return src\r\n            },\r\n            createImage(imgfile) {\r\n                let img = new Image()\r\n                //  url , imgsrc, 文件  三种情况\r\n                img.crossOrigin = 'anonymous'\r\n                img.src = this.getFileSrc(imgfile)\r\n                img.onload = () => { // 等到图片加载进来之后\r\n                    this.animation(img)\r\n                }\r\n            },\r\n            inputHandle() {\r\n                document.getElementById('file-input').click()\r\n            },\r\n            getImageColor(data) { \r\n                if (this.color) {\r\n                    return this.color\r\n                }\r\n                let r=0, g=0, b=0\r\n                // 取所有像素的平均值\r\n                const num = 50\r\n                for (var row = 0; row < num; row++) {\r\n                    for (var col = 0; col < num; col++) {\r\n                        r += data[((num * row) + col) * 4];\r\n                        g += data[((num * row) + col) * 4 + 1];\r\n                        b += data[((num * row) + col) * 4 + 2];\r\n                    }\r\n                }\r\n                // 求取平均值\r\n                r /= (num * num);\r\n                g /= (num * num);\r\n                b /= (num * num);\r\n                // 将最终的值取整\r\n                r = Math.round(r);\r\n                g = Math.round(g);\r\n                b = Math.round(b);\r\n                return `rgba(${255 - r}, ${255 - g}, ${255 - b}, 1)`\r\n            }\r\n        },\r\n        mounted() {\r\n            // 解决 字体模糊\r\n            const { mountNode } = this.$refs\r\n            const { clientWidth, clientHeight } = mountNode\r\n            // p可以优化\r\n            this.options = {\r\n                width: clientWidth,\r\n                height: clientHeight\r\n            }\r\n            // canvas dom\r\n            let canvasDom =  document.createElement('canvas')\r\n            canvasDom.style.width =  clientWidth + 'px'\r\n            canvasDom.style.height = clientHeight + 'px'\r\n            mountNode.appendChild(canvasDom)\r\n            this.ctx = canvasDom.getContext('2d')\r\n            const pixelRatio = this.pixelRatio = this.getPixelRatio(this.ctx)\r\n            canvasDom.width = clientWidth * pixelRatio\r\n            canvasDom.height = clientHeight * pixelRatio\r\n            this.ctx.scale(pixelRatio, pixelRatio)\r\n            // console.log(this.$slots.initial[0].data.attrs.src)\r\n            if (this.defaultImgUrl || this.$slots.defaultImgUrl) {\r\n                const src = this.defaultImgUrl ? this.defaultImgUrl : this.$slots.defaultImgUrl[0].data.attrs.src\r\n                this.createImage(src)\r\n                this.noImage = false\r\n            }\r\n            this.$emit('input', {\r\n                getImage: this.getImage,\r\n                changeImage: this.changeImage\r\n            })           \r\n        }\r\n    }\r\n</script>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","import { render, staticRenderFns } from \"./cropblg.vue?vue&type=template&id=53190108&\"\nimport script from \"./cropblg.vue?vue&type=script&lang=js&\"\nexport * from \"./cropblg.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\r\nimport crop from './cropblg.vue';\r\n\r\n// const components = [progresschart];\r\n\r\n// 定义 install 方法\r\nconst install = function (Vue) {\r\n    if (install.installed) return\r\n    install.installed = true\r\n    // 遍历并注册全局组件\r\n    // components.map(component => {\r\n        Vue.component(crop.name, crop)\r\n    // })\r\n}\r\n\r\n//  全局引用可自动安装\r\nif (typeof window !== 'undefined' && window.Vue) {\r\n    install(window.Vue);\r\n}\r\nexport default {\r\n    install,\r\n    crop\r\n};\r\nexport { crop };","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}