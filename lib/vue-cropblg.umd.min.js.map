{"version":3,"sources":["webpack://vue-cropblg/webpack/universalModuleDefinition","webpack://vue-cropblg/webpack/bootstrap","webpack://vue-cropblg/./node_modules/current-script-polyfill/currentScript.js","webpack://vue-cropblg/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://vue-cropblg/./packages/cropblg.vue?4619","webpack://vue-cropblg/./packages/util.js","webpack://vue-cropblg/packages/cropblg.vue","webpack://vue-cropblg/./packages/cropblg.vue?0b4c","webpack://vue-cropblg/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://vue-cropblg/./packages/cropblg.vue","webpack://vue-cropblg/./packages/index.js","webpack://vue-cropblg/./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","document","currentScript","scripts","getElementsByTagName","Error","err","res","exec","stack","src","readyState","window","match","render","_vm","_h","$createElement","_c","_self","ref","staticClass","staticStyle","overflow","on","touchstart","$event","handleStart","touchmove","handleMove","touchend","handleEnd","directives","rawName","expression","height","display","justify-content","align-items","flex-wrap","click","inputHandle","stopPropagation","_t","_v","attrs","type","multiple","id","accept","change","uploadImg","staticRenderFns","getImageDirection","img","Promise","reslove","reject","getImageData","data","orientation","getOrientation","error","test","base64ToArrayBuffer","http","XMLHttpRequest","status","base64","binary","atob","len","length","buffer","ArrayBuffer","view","Uint8Array","getStringFromCharCode","dataView","start","str","String","arrayBuffer","exifIDCode","tiffOffset","firstIFDOffset","littleEndian","endianness","app1Start","ifdStart","offset","DataView","byteLength","correctImage","x","y","width","canvas","ctx","Math","cropblgvue_type_script_lang_js_","props","noImage","options","pixelRatio","scale","image","points","lines","cropper","corePoint","startPoint","nookSide","rotateAngle","bgOpacity","touchBar","paintBrush","revokeBar","watch","shape","draw","rotation","rotateBtn","drawAction","methods","init","pointList","clientW","clientH","_this$options","currentW","currentH","k","minNum","element","clientWidth","clientHeight","maxRadius","min","arc","interval","number","undefined","penBtn","revokeBtn","_this$options2","clearRect","fillBackground","fillImage","drawPointFn","averageColor","getImageColor","fillArcCropper","updatePoint","fillRectCropper","drawTouchBar","drawPaintBrush","drawRevokeBar","_this","quality","arguments","forEach","el","lineWidth","limit","strokeStyle","color","lineCap","beginPath","pointLine","moveTo","lineTo","stroke","closePath","fillStyle","fill","PI","alpha","h1","h2","fillRect","x1","sin","y1","cos","x2","y2","x0","y0","canvasRotate","cWidth","cHeight","forecastX","forecastY","diffX","diffY","lineHeight","halfLineHeight","strokeRect","index","save","translate","rotate","restore","handleArcMove","_ref","getDistance","pageX","pageY","_this$options3","concat","getNewCropper","touchX","touchY","cropperWidth","cropperHeight","cropperX","cropperY","handlePointMove","_ref2","newCropper","_this$getNewCropper","renderCropper","handleLineMove","_ref3","_this$getNewCropper2","_objectSpread","handleImageMove","_ref4","offsetX","offsetY","getCoordinateByEvent","e","rect","target","getBoundingClientRect","touch","touches","_this$options4","coordinate","clientX","left","clientY","top","changeDrawAction","drawPoint","push","pointObj","preventDefault","startTouches","getPointByCoordinate","abs","current","checkRegion","checkArc","isPointInPath","_ref5","_this2","pop","angle","some","point","line","p1","p2","sqrt","max","getImage","_this3","mimeType","types","Base64","resolve","toDataURL","Blob","toBlob","blob","w","h","canvasDom","createElement","cCtx","getContext","radius","clip","_this3$position","_slicedToArray","position","_this3$position$","_this3$position$2","_this3$position$3","size","_this3$position$4","imageWatermark","watermarkImg","Image","getFileSrc","crossOrigin","onload","imgX","parseInt","imgY","textWatermark","font","text","measureText","textX","textY","halfHeight","halfWidth","drawImage","fillText","changeImage","imgAddress","createImage","getPixelRatio","context","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","devicePixelRatio","files","toString","URL","createObjectURL","imgfile","_this4","then","$emit","catch","console","getElementById","g","b","num","row","col","round","mounted","mountNode","$refs","style","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","appendChild","defaultImgUrl","$slots","packages_cropblgvue_type_script_lang_js_","normalizeComponent","scriptExports","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","_compiled","functional","_scopeId","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","existing","beforeCreate","component","cropblg","install","Vue","installed","crop","packages_0","packages_install","__webpack_exports__"],"mappings":"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","file":"vue-cropblg.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"vue-cropblg\"] = factory();\n\telse\n\t\troot[\"vue-cropblg\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n","// document.currentScript polyfill by Adam Miller\n\n// MIT license\n\n(function(document){\n  var currentScript = \"currentScript\",\n      scripts = document.getElementsByTagName('script'); // Live NodeList collection\n\n  // If browser needs currentScript polyfill, add get currentScript() to the document object\n  if (!(currentScript in document)) {\n    Object.defineProperty(document, currentScript, {\n      get: function(){\n\n        // IE 6-10 supports script readyState\n        // IE 10+ support stack trace\n        try { throw new Error(); }\n        catch (err) {\n\n          // Find the second match for the \"at\" string to get file src url from stack.\n          // Specifically works with the format of stack traces in IE.\n          var i, res = ((/.*at [^\\(]*\\((.*):.+:.+\\)$/ig).exec(err.stack) || [false])[1];\n\n          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag\n          for(i in scripts){\n            if(scripts[i].src == res || scripts[i].readyState == \"interactive\"){\n              return scripts[i];\n            }\n          }\n\n          // If no match, return null\n          return null;\n        }\n      }\n    });\n  }\n})(document);\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    require('current-script-polyfill')\n  }\n\n  var i\n  if ((i = window.document.currentScript) && (i = i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_public_path__ = i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"mountNode\",staticClass:\"mount-node\",staticStyle:{\"overflow\":\"hidden\"},on:{\"touchstart\":function($event){return _vm.handleStart($event)},\"touchmove\":function($event){return _vm.handleMove($event)},\"touchend\":function($event){return _vm.handleEnd($event)}}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.noImage),expression:\"noImage\"}],staticClass:\"no-image-file\",staticStyle:{\"height\":\"100%\",\"display\":\"flex\",\"justify-content\":\"center\",\"align-items\":\"center\",\"flex-wrap\":\"wrap\"},on:{\"click\":_vm.inputHandle,\"touchstart\":function($event){$event.stopPropagation();return (function (){})($event)},\"touchmove\":function($event){$event.stopPropagation();return (function (){})($event)}}},[_vm._t(\"placeholder\",[_c('span',[_vm._v(\"暂时没有图片,请选择图像\")])]),_c('div',{staticStyle:{\"display\":\"none\"}},[_c('input',{attrs:{\"type\":\"file\",\"multiple\":false,\"id\":\"file-input\",\"accept\":\"image/*\"},on:{\"change\":_vm.uploadImg}}),_vm._t(\"defaultImgUrl\")],2)],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// exif  https://github.com/exif-js/exif-js/blob/master/exif.js\r\n\r\nexport const getImageDirection = (img) => new Promise((reslove, reject) => {\r\n    getImageData(img).then(data => {\r\n        const orientation =  getOrientation(data) || 1\r\n        reslove(orientation)\r\n    }).\r\n    catch(error => {\r\n        reject(error)\r\n    })\r\n})\r\n\r\n// 这里的获取exif要将图片转ArrayBuffer对象，这里假设获取了图片的baes64\r\n// 步骤一\r\n// base64转ArrayBuffer对象\r\nfunction getImageData(img) {\r\n    let data = null\r\n    return new Promise((reslove, reject) => {\r\n        if (img.src) {\r\n            // eslint-disable-next-line\r\n            if (/^data\\:/i.test(img.src)) { // Data URI\r\n                data = base64ToArrayBuffer(img.src)\r\n                reslove(data)\r\n            } else {\r\n                var http = new XMLHttpRequest()\r\n                http.onload = function() {\r\n                    if (this.status == 200 || this.status === 0) {\r\n                        data = http.response \r\n                        reslove(data)\r\n                    } else {\r\n                        throw \"Could not load image\"\r\n                    }\r\n                    http = null\r\n                }\r\n                http.open(\"GET\", img.src, true)\r\n                http.responseType = \"arraybuffer\"\r\n                http.send(null)\r\n            }\r\n        } else {\r\n            reject('img error')\r\n        }\r\n    })\r\n}\r\n\r\n/*eslint no-useless-escape: \"error\"*/\r\nfunction base64ToArrayBuffer(base64) {\r\n    // eslint-disable-next-line\r\n    base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\r\n    var binary = atob(base64);\r\n    var len = binary.length;\r\n    var buffer = new ArrayBuffer(len);\r\n    var view = new Uint8Array(buffer);\r\n    for (var i = 0; i < len; i++) {\r\n      view[i] = binary.charCodeAt(i);\r\n    }\r\n    return buffer;\r\n  }\r\n  // 步骤二，Unicode码转字符串\r\n  // ArrayBuffer对象 Unicode码转字符串\r\n  function getStringFromCharCode(dataView, start, length) {\r\n    var str = '';\r\n    var i;\r\n    for (i = start, length += start; i < length; i++) {\r\n      str += String.fromCharCode(dataView.getUint8(i));\r\n    }\r\n    return str;\r\n  }\r\n// 步骤三，获取jpg图片的exif的角度（在ios体现最明显）\r\nfunction getOrientation(arrayBuffer) {\r\n    var dataView = new DataView(arrayBuffer);\r\n    var length = dataView.byteLength;\r\n    var orientation;\r\n    var exifIDCode;\r\n    var tiffOffset;\r\n    var firstIFDOffset;\r\n    var littleEndian;\r\n    var endianness;\r\n    var app1Start;\r\n    var ifdStart;\r\n    var offset;\r\n    var i;\r\n    // Only handle JPEG image (start by 0xFFD8)\r\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\r\n        offset = 2;\r\n        while (offset < length) {\r\n            if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\r\n                app1Start = offset;\r\n                break\r\n            }\r\n            offset++\r\n        }\r\n    }\r\n    if (app1Start) {\r\n        exifIDCode = app1Start + 4;\r\n        tiffOffset = app1Start + 10;\r\n          if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\r\n            endianness = dataView.getUint16(tiffOffset);\r\n            littleEndian = endianness === 0x4949;\r\n            if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\r\n                if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\r\n                    firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\r\n                    if (firstIFDOffset >= 0x00000008) {\r\n                        ifdStart = tiffOffset + firstIFDOffset;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (ifdStart) {\r\n        length = dataView.getUint16(ifdStart, littleEndian);\r\n        for (i = 0; i < length; i++) {\r\n            offset = ifdStart + i * 12 + 2;\r\n            if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) {\r\n                // 8 is the offset of the current tag's value\r\n                offset += 8\r\n                // Get the original orientation value\r\n                orientation = dataView.getUint16(offset, littleEndian)\r\n                // Override the orientation with its default value for Safari (#120)\r\n                // if (IS_SAFARI_OR_UIWEBVIEW) {\r\n                //   dataView.setUint16(offset, 1, littleEndian);\r\n                // }\r\n                break\r\n            }\r\n        }\r\n    }\r\n    return orientation;\r\n  }\r\n// canvas-exif-orientation  https://github.com/koba04/canvas-exif-orientation/blob/master/index.js\r\n//   \r\n  export function correctImage(img, orientation, type, x, y, width, height) {\r\n    if (!/^[1-8]$/.test(orientation)) throw new Error('orientation should be [1-8]')\r\n    if (x == null) x = 0\r\n    if (y == null) y = 0\r\n    if (width == null) width = img.width\r\n    if (height == null) height = img.height\r\n    var canvas = document.createElement('canvas')\r\n    var ctx = canvas.getContext('2d')\r\n    canvas.width = width\r\n    canvas.height = height\r\n    ctx.save()\r\n    switch (+orientation) {\r\n      // 1 = The 0th row is at the visual top of the image, and the 0th column is the visual left-hand side.\r\n      case 1:\r\n          break\r\n\r\n      // 2 = The 0th row is at the visual top of the image, and the 0th column is the visual right-hand side.\r\n      case 2:\r\n         ctx.translate(width, 0);\r\n         ctx.scale(-1, 1);\r\n         break\r\n\r\n      // 3 = The 0th row is at the visual bottom of the image, and the 0th column is the visual right-hand side.\r\n      case 3:\r\n          ctx.translate(width, height);\r\n          ctx.rotate(180 / 180 * Math.PI);\r\n          break\r\n\r\n      // 4 = The 0th row is at the visual bottom of the image, and the 0th column is the visual left-hand side.\r\n      case 4:\r\n          ctx.translate(0, height);\r\n          ctx.scale(1, -1);\r\n          break\r\n\r\n      // 5 = The 0th row is the visual left-hand side of the image, and the 0th column is the visual top.\r\n      case 5:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.rotate(90 / 180 * Math.PI);\r\n          ctx.scale(1, -1);\r\n          break\r\n\r\n      // 6 = The 0th row is the visual right-hand side of the image, and the 0th column is the visual top.\r\n      case 6:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.rotate(90 / 180 * Math.PI);\r\n          ctx.translate(0, -height);\r\n          break\r\n\r\n      // 7 = The 0th row is the visual right-hand side of the image, and the 0th column is the visual bottom.\r\n      case 7:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.rotate(270 / 180 * Math.PI);\r\n          ctx.translate(-width, height);\r\n          ctx.scale(1, -1);\r\n          break\r\n\r\n      // 8 = The 0th row is the visual left-hand side of the image, and the 0th column is the visual bottom.\r\n      case 8:\r\n          canvas.width = height;\r\n          canvas.height = width;\r\n          ctx.translate(0, width);\r\n          ctx.rotate(270 / 180 * Math.PI);\r\n          break\r\n    }\r\n\r\n    ctx.drawImage(img, x, y, width, height)\r\n    ctx.restore()\r\n  \r\n    return canvas\r\n    // return  new Promise((reslove) => {\r\n    //     if (!type) {\r\n    //         reslove(canvas)\r\n    //         return\r\n    //     }\r\n    //     canvas.toBlob(function(blob) {\r\n    //         const newImg = new Image()\r\n    //         const url =  window.URL.createObjectURL(blob)\r\n    //         newImg.src = url\r\n    //         newImg.onload = function() {\r\n    //         // 手机上有严重的性能问题\r\n    //             reslove(newImg)\r\n    //         }\r\n    //     })\r\n    // })\r\n}\r\n  ","<template>\r\n    <div ref=\"mountNode\" \r\n        class=\"mount-node\" \r\n        @touchstart=\"handleStart($event)\"\r\n        @touchmove=\"handleMove($event)\"\r\n        @touchend=\"handleEnd($event)\"\r\n        style=\"overflow: hidden;\"\r\n    >\r\n         <!-- style=\" overflow: hidden;\" -->\r\n    <!--  不能绑在wrap 上=== 这样子任何点击都会计算 -后期优化-->\r\n        <div v-show=\"noImage\" @click=\"inputHandle\" class=\"no-image-file\" style=\"height: 100%; display: flex;justify-content: center;align-items: center;flex-wrap: wrap;\"  @touchstart.stop=\"()=>{}\" @touchmove.stop=\"()=>{}\">\r\n            <!-- <span>暂时没有图片,请选择图像</span> -->\r\n            <slot name=\"placeholder\"><span>暂时没有图片,请选择图像</span></slot>\r\n            <div style=\"display:none\">\r\n                <input \r\n                    @change=\"uploadImg\"\r\n                    type=\"file\"\r\n                    :multiple=\"false\"\r\n                    id=\"file-input\"\r\n                    accept=\"image/*\"\r\n                >\r\n                <slot name=\"defaultImgUrl\"></slot>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { getImageDirection, correctImage } from './util'\r\n    export default {\r\n        name: 'crop',\r\n        //1. props 验证   2.支持pc\r\n        props:[\r\n            'value',\r\n            'position',\r\n            'textWatermark',\r\n            'imgLoaded',\r\n            'imageWatermark',\r\n            'defaultImgUrl',\r\n            'color',\r\n            'angle',\r\n            'rotation',\r\n            'shape', \r\n            'penBtn',\r\n            'revokeBtn',\r\n            'rotateBtn'\r\n          ],\r\n        data() {\r\n            return {\r\n                // ready: false,\r\n                noImage: true,\r\n                ctx: null,\r\n                options: null,\r\n                pixelRatio: null,\r\n                scale:1,\r\n                canvas: null,\r\n                image: {},\r\n                points: [],\r\n                lines: [],\r\n                cropper: {},\r\n                corePoint: {},\r\n                startPoint: {},\r\n                nookSide: 20,\r\n                rotateAngle: 0,\r\n                bgOpacity: 0,\r\n                // 三个操作按钮  默认不显示的\r\n                touchBar: null,\r\n                paintBrush: null,\r\n                revokeBar: null\r\n            }\r\n        },\r\n        watch: {\r\n            shape() {\r\n                if (!this.noImage) {\r\n                    this.draw()\r\n                }\r\n            },\r\n            rotation() {\r\n                //  内旋转 外旋转 只能有一个\r\n                if (!this.noImage && !this.rotateBtn && !this.drawAction) {\r\n                    this.rotateAngle = this.rotation\r\n                    this.draw()\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            init(img){\r\n                this.pointList = []\r\n                const clientW = img.width,\r\n                clientH = img.height,\r\n                { width, height } = this.options\r\n                let currentW = clientW,\r\n                    currentH = clientH,\r\n                    k = 1 // contain 时的缩放比\r\n                // contain 图片\r\n                if (clientW > width) {\r\n                    // alert('12123')\r\n                    currentW = width\r\n                    k = currentW / clientW\r\n                    currentH = k * clientH\r\n                }\r\n                if (currentH > height) {\r\n                    currentH = height\r\n                    k = currentH / clientH\r\n                    currentW = k * clientW\r\n                }\r\n                // 针对小图片\r\n                const minNum = 120\r\n                if (clientW < minNum && currentH < minNum) {\r\n                    currentW = minNum\r\n                    k = currentW / clientW\r\n                    currentH = k * clientH\r\n                }\r\n                this.scale = k\r\n                // 针对小图片\r\n                this.image = {\r\n                    element: img,\r\n                    width: currentW, // 显示宽度\r\n                    height: currentH, // 真是 宽度\r\n                    x: (width - currentW) / 2,\r\n                    y: (height - currentH) / 2,\r\n                    clientWidth: clientW,\r\n                    clientHeight: clientH\r\n                }\r\n\r\n                const corePoint = this.corePoint = {x: width / 2 ,y : height / 2} \r\n                this.maxRadius = Math.min(width, height) / 2\r\n                this.arc = {\r\n                    x: corePoint.x,\r\n                    y: corePoint.y,\r\n                    r: this.maxRadius  / 2\r\n                }\r\n                this.cropper = {\r\n                    x: (width - currentW / 2) / 2,\r\n                    y: (height - currentH / 2) / 2,\r\n                    width: currentW  / 2,\r\n                    height: currentH / 2\r\n                }\r\n\r\n                const interval = 8 // 间隔\r\n                let number = 0  //  按钮数量\r\n\r\n                //  三个 if  更好 内聚 --\r\n                const rotateBtn = this.rotateBtn === undefined || this.rotateBtn \r\n                const penBtn = this.penBtn === undefined  || this.penBtn \r\n                const revokeBtn = this.revokeBtn  === undefined  || this.revokeBtn\r\n                if (rotateBtn) {\r\n                    this.touchBar = {\r\n                        x: width - 30 - 7,\r\n                        y: 10,\r\n                        width: 30,\r\n                        height: 30\r\n                    }\r\n                    number ++ \r\n                }\r\n                // width  画布宽度\r\n                if (penBtn) {\r\n                    this.paintBrush = {\r\n                        x: width - 30 - 7,\r\n                        y: 10 + ( 30 + interval) * number,\r\n                        width: 30,\r\n                        height: 30\r\n                    }\r\n                    number ++ \r\n                }\r\n                if (revokeBtn) {\r\n                    this.revokeBar = {\r\n                        x: width - 30 - 7,\r\n                        y: 10 + (30  + interval ) * number,\r\n                        width: 30,\r\n                        height: 30\r\n                    }\r\n                    number ++ \r\n                }\r\n                this.draw()\r\n            },\r\n            draw() {\r\n                const { width, height } = this.options,\r\n                shape = this.shape || 'rect'\r\n                // 避免预览到背景\r\n                this.ctx.clearRect(0, 0, width, height)\r\n                // // 背景 // 考虑用css 实现\r\n                this.fillBackground()\r\n                //  处理出片\r\n                this.fillImage()\r\n                // console.timeEnd('fillImage')\r\n                this.drawPointFn(this.ctx)\r\n                if (!this.averageColor) {\r\n                        this.averageColor = this.getImageColor(this.ctx.getImageData(this.corePoint.x - 25,  this.corePoint.y - 25, 50, 50).data)\r\n                }\r\n                if (shape === 'arc') {\r\n                    this.fillArcCropper()\r\n                } else  if (shape === 'rect') {\r\n                    this.updatePoint()\r\n                    this.fillRectCropper()\r\n                }\r\n                //  console.time('drawTouchBar')\r\n                this.drawTouchBar(this.touchBar)\r\n                this.drawPaintBrush(this.paintBrush)\r\n                this.drawRevokeBar(this.revokeBar)\r\n                // 写的 线\r\n                // console.timeEnd('drawTouchBar')\r\n                // this.preview()\r\n            },\r\n            // rotatePoint({ pageX, pageY }, r, angle){\r\n            //     angle = Math.PI / 180 * angle\r\n            //     return { \r\n            //         x: pageX + Math.cos(angle) * r,\r\n            //         y: pageY + Math.sin(angle) * r\r\n            //     }\r\n            // },\r\n            drawPointFn(ctx, quality = null, cropper = this.image, image = this.image){\r\n                const pointList = this.pointList\r\n                // const image = this.image\r\n                if (pointList.length > 0) {\r\n                    pointList.forEach(el => {\r\n                        const scale = this.scale / el.scale\r\n                        const lineWidth =  this.limit(el.lineWidth * scale, 1, 5)\r\n                        ctx.lineWidth = quality ? lineWidth * 2 : lineWidth\r\n                        ctx.strokeStyle = el.color\r\n                        ctx.lineCap = 'round'\r\n                        ctx.beginPath()\r\n                        el.pointLine.forEach((element,i)=>{\r\n                            if (i === 0) {\r\n                                // 要相对于图片的位置 才是对的  不能相对于 画布\r\n                                if (quality) {\r\n                                    // console.log(element)\r\n                                    ctx.moveTo((image.x + (element.x * scale) - cropper.x)* quality , (image.y + (element.y * scale) - cropper.y) * quality)\r\n                                } else {\r\n                                    ctx.moveTo((image.x + element.x * scale) , (image.y + element.y * scale))\r\n                                }\r\n                            }\r\n                            if (quality) {\r\n                                ctx.lineTo((image.x + (element.x * scale) - cropper.x) * quality, (image.y + (element.y * scale) - cropper.y) * quality)\r\n                            } else {\r\n                                ctx.lineTo((image.x + element.x * scale), (image.y + element.y * scale))\r\n                            }\r\n                        })\r\n                        ctx.stroke()\r\n                    })\r\n                }\r\n                //  ctx.lineWidth = 5\r\n            },\r\n            drawPaintBrush(touchBar) {\r\n                if (!touchBar) return\r\n                const {x, y} = touchBar \r\n                const ctx = this.ctx,\r\n                // touchBar = touchBar,\r\n                color = this.color || this.averageColor\r\n                ctx.lineWidth = 2\r\n                ctx.lineCap = 'round'\r\n                ctx.beginPath()\r\n                ctx.moveTo(x + 20, y + 5)\r\n                ctx.lineTo(x + 24, y +  9)\r\n                ctx.lineTo(x + 12, y + 21)\r\n                ctx.lineTo(x + 7, y + 22)\r\n                ctx.lineTo(x + 8, y + 17)\r\n                // ctx.lineTo(x + 20, y + 5)\r\n                ctx.closePath()\r\n                if (this.drawAction) {\r\n                    ctx.fillStyle = color\r\n                    ctx.fill();\r\n                }\r\n                // ctx.stroke()\r\n                ctx.moveTo(x + 5, y + 26)\r\n                ctx.lineTo(x + 25, y + 26)\r\n                 ctx.stroke()\r\n            },\r\n            drawRevokeBar(touchBar) {\r\n                if (!touchBar) return\r\n                const {x, y} = touchBar\r\n                //  const {x, y, width} = touchBar   //  用宽 算个比例\r\n                const ctx = this.ctx,\r\n                // touchBar = touchBar,\r\n                color = this.color || this.averageColor\r\n                ctx.lineWidth = 2\r\n                ctx.lineCap = 'round'\r\n                ctx.beginPath()\r\n                ctx.moveTo(x + 15, y + 12)\r\n                ctx.lineTo(x + 15, y + 8)\r\n                ctx.lineTo(x + 7, y + 15)\r\n\r\n                ctx.lineTo(x + 15, y + 22)\r\n                ctx.lineTo(x + 15, y + 18)\r\n                ctx.stroke()\r\n                ctx.fillStyle = color\r\n                ctx.fill()\r\n                ctx.beginPath()\r\n                ctx.arc(x + 15,  y + 24, 12, -Math.PI/2, -Math.PI/180 * 18, false)\r\n                ctx.arc(x + 15,  y + 35, 17,-Math.PI/180 * 45, -Math.PI/2, true)\r\n                ctx.stroke()\r\n                ctx.fillStyle = color\r\n                ctx.fill()\r\n            },\r\n            drawTouchBar(touchBar) {\r\n                if (!touchBar) return\r\n                const ctx = this.ctx,\r\n                color = this.color || this.averageColor,\r\n                x = touchBar.x + touchBar.width * 0.6,\r\n                y =  touchBar.y + touchBar.height * 0.64,\r\n                r = touchBar.width * 0.41,\r\n                alpha = 6,\r\n                h1 = touchBar.width * 0.1,\r\n                h2 =  touchBar.width * 0.18\r\n                ctx.lineWidth = 1\r\n                // 填充颜色\r\n                ctx.fillStyle = color\r\n                // strokeRect  fillRect\r\n                ctx.fillRect(x - touchBar.width / 6, y - touchBar.height / 6, touchBar.width * 0.43, touchBar.height * 0.43)\r\n                ctx.beginPath()\r\n                ctx.arc(x, y, r, Math.PI/180 * 180, -Math.PI/2 + alpha, false)\r\n                ctx.stroke()\r\n                if(alpha < 2*Math.PI) {\r\n                    const x1 = x + (r - h1) * Math.sin(alpha),\r\n                    y1 = y - (r - h1) * Math.cos(alpha),\r\n                    x2 = x + (r + h1) * Math.sin(alpha),\r\n                    y2 = y - (r + h1) * Math.cos(alpha),\r\n                    x0 = (x1 + x2) / 2 + h2 * Math.sin(alpha + Math.PI/2),\r\n                    y0 = (y1 + y2) / 2 - h2 * Math.cos(alpha + Math.PI/2)\r\n                    ctx.beginPath()\r\n                    ctx.moveTo(x0, y0)\r\n                    ctx.lineTo(x1, y1)\r\n                    ctx.lineTo(x2, y2)\r\n                    ctx.fill()\r\n                }\r\n            },\r\n            fillImage() {\r\n                const image = this.image\r\n                const ctx = this.ctx\r\n                const rotateAngle = this.rotateAngle\r\n                this.canvasRotate('img', ctx, image.element, rotateAngle, image.x, image.y, image.width, image.height)\r\n                // ctx.drawImage(image.element, image.x, image.y, image.width, image.height)\r\n            },\r\n            updatePoint() {\r\n                // 点中点和线 不用 执行 \r\n                const c = this.cropper,\r\n                nookSide =  this.nookSide,\r\n                cWidth = c.x + c.width,\r\n                cHeight = c.y + c.height,\r\n                forecastX = cWidth - nookSide,\r\n                forecastY = cHeight - nookSide\r\n                this.points = [\r\n                    {\r\n                        x: c.x,\r\n                        y: c.y,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: 0,\r\n                        diffY: 0\r\n                    },\r\n                    {\r\n                        x: forecastX ,\r\n                        y: c.y,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: nookSide,\r\n                        diffY: 0\r\n                    },\r\n                    {\r\n                        x: forecastX ,\r\n                        y: forecastY,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: nookSide,\r\n                        diffY: nookSide\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: forecastY,\r\n                        width:nookSide,\r\n                        height:nookSide,\r\n                        diffX: 0,\r\n                        diffY: nookSide\r\n                    }\r\n                ]\r\n                // 寻找四根线\r\n                const lineHeight = nookSide / .7,\r\n                halfLineHeight = lineHeight / 2\r\n                this.lines = [\r\n                     {\r\n                        x: c.x,\r\n                        y: c.y - halfLineHeight,\r\n                        width: c.width,\r\n                        height: lineHeight\r\n                    },\r\n                    {\r\n                        x: cWidth - halfLineHeight,\r\n                        y: c.y,\r\n                        width: lineHeight,\r\n                        height: c.height\r\n                    },\r\n                    {\r\n                        x: c.x,\r\n                        y: cHeight - halfLineHeight,\r\n                        width: c.width,\r\n                        height: lineHeight\r\n                    },\r\n                    {\r\n                        x: c.x - halfLineHeight,\r\n                        y: c.y,\r\n                        width: lineHeight,\r\n                        height: c.height\r\n                    }\r\n                ]\r\n            },\r\n            fillRectCropper() {\r\n                const ctx = this.ctx,\r\n                cropper = this.cropper,\r\n                points = this.points,\r\n                color = this.color || this.averageColor\r\n                ctx.strokeStyle = color\r\n                ctx.lineWidth = 2\r\n                ctx.strokeRect(cropper.x, cropper.y, cropper.width, cropper.height)\r\n                ctx.fillStyle = color\r\n                const nookSide = this.nookSide / 8\r\n                points.forEach((element, index) => {\r\n                    ctx.save()\r\n                    ctx.translate(element.x + element.diffX, element.y + element.diffY)\r\n                    ctx.rotate(index * 90 * (Math.PI/180))\r\n                    ctx.fillRect(-nookSide, -nookSide, element.height, nookSide * 2)\r\n                    ctx.fillRect(-nookSide, -nookSide, nookSide * 2, element.width)\r\n                    // if(index % 2 === 0){\r\n                    //     ctx.fillRect(-nookSide, cropper.height / 2 - element.nookSide , element.nookSide / 4, element.nookSide * 2)\r\n                    // } else {\r\n                    //     ctx.fillRect(-nookSide, cropper.width / 2 - element.nookSide, element.nookSide / 4, element.nookSide * 2)\r\n                    // }\r\n                    ctx.restore()\r\n                });\r\n                // console.log(this.arc.r)\r\n                // 圆\r\n\r\n                \r\n            },\r\n            fillArcCropper() {\r\n                const ctx = this.ctx\r\n                ctx.beginPath()\r\n                ctx.strokeStyle = this.color || this.averageColor\r\n                ctx.lineWidth =  2 // this.nookSide / 0.7\r\n                ctx.arc(this.arc.x, this.arc.y, this.arc.r, 0, Math.PI * 2)\r\n                ctx.stroke();\r\n            },\r\n            handleArcMove({x, y}) {\r\n                this.arc.r = this.limit(this.getDistance({pageX: x, pageY: y}, {pageX: this.arc.x, pageY: this.arc.y}), this.nookSide * 2, this.maxRadius)\r\n                this.draw()\r\n            },\r\n           // 填充背景\r\n            fillBackground() {\r\n                // 多个变量可以用逗号 一次赋值\r\n                const { width, height } = this.options, \r\n                ctx = this.ctx\r\n                ctx.save()\r\n                ctx.fillStyle = '#fff'\r\n                ctx.fillStyle = `rgba(0, 0, 0, ${this.bgOpacity})`\r\n                ctx.fillRect(0, 0, width, height)\r\n                 //蒙层 \r\n                ctx.restore()\r\n            },\r\n            getNewCropper(touchX, touchY ,cropper) {\r\n               return {\r\n                    cropperWidth:(cropper.x + cropper.width) - touchX,\r\n                    cropperHeight: (cropper.y + cropper.height) - touchY,\r\n                    cropperX: touchX - cropper.x,\r\n                    cropperY: touchY - cropper.y\r\n               }\r\n            },\r\n            handlePointMove({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {},\r\n                { cropperWidth, cropperHeight, cropperX, cropperY } = this.getNewCropper(x, y, cropper)\r\n                switch (this.index) {\r\n                    case 0:\r\n                        newCropper.width =  cropperWidth\r\n                        newCropper.height = cropperHeight\r\n                        newCropper.x = x\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 1:\r\n                    // x  不会动\r\n                        newCropper.width =  cropperX\r\n                        newCropper.height =  cropperHeight\r\n                        newCropper.y = y\r\n                        break;\r\n                    case 3:\r\n                    // y 不会动\r\n                        newCropper.width = cropperWidth\r\n                        newCropper.height = cropperY\r\n                        newCropper.x = x\r\n                        break;\r\n                    case 2:\r\n                        newCropper.width = cropperX\r\n                        newCropper.height = cropperY\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.renderCropper(newCropper)\r\n            },\r\n            handleLineMove ({ x, y }) {\r\n                const cropper = this.cropper,\r\n                newCropper = {},\r\n                { cropperWidth, cropperHeight, cropperX, cropperY } = this.getNewCropper(x, y, cropper)\r\n                switch (this.index) {\r\n                    case 3:\r\n                        newCropper.width = cropperWidth\r\n                        newCropper.x = x // 限制\r\n                        break;\r\n                    case 0:\r\n                        newCropper.height = cropperHeight\r\n                        newCropper.y = y // 限制\r\n                        break;\r\n                    case 1:\r\n                        newCropper.width = cropperX\r\n                        break;\r\n                    case 2:\r\n                    // y 不会动\r\n                        newCropper.height = cropperY\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                this.renderCropper(newCropper)\r\n            },\r\n            renderCropper(newCropper) {\r\n                 if (newCropper.width <= this.nookSide * 4 || newCropper.height <= this.nookSide * 4) {\r\n                    return\r\n                }\r\n                this.cropper = {...this.cropper,...newCropper}\r\n                this.draw()\r\n            },\r\n            handleImageMove ({ x, y }) {\r\n                const s = this.startPoint\r\n                this.image.x = x - s.offsetX\r\n                this.image.y = y - s.offsetY\r\n                // 限制图片移动的范围\r\n                // 三种情况 \r\n                // 1. 图片\r\n                // 2. 框\r\n                // 3. 圆圈\r\n                /**     \r\n                    let cropper = this.cropper\r\n                    const shape = this.shape || 'rect'\r\n                    if (shape == 'imgage') {\r\n                        // this.options\r\n                        cropper = {\r\n                            x: 0,\r\n                            y: 0,\r\n                            width: this.options.width,\r\n                            height: this.options.height\r\n                        }\r\n                    } else if (shape === 'arc') {\r\n                        cropper = {\r\n                            x: this.arc.x - this.arc.r,\r\n                            y: this.arc.y - this.arc.r,\r\n                            width: this.arc.r * 2,\r\n                            height: this.arc.r * 2\r\n                        }\r\n                    }\r\n                    const left = cropper.x,\r\n                    right = cropper.x + cropper.width,\r\n                    bottom = cropper.y + cropper.height,\r\n                    top = cropper.y\r\n                    this.image.x = this.limit(x - s.offsetX, right - this.image.width, left)\r\n                    this.image.y = this.limit(y - s.offsetY, bottom - this.image.height, top)\r\n                */\r\n                this.draw()\r\n            },\r\n            // handleCropperMove({ x, y }) {\r\n            //     const { width, height } = this.options;\r\n            //     const s = this.startPoint;\r\n            //     const oX = s.offsetX;\r\n            //     const oY = s.offsetY;\r\n            //     const maxX = width - this.cropper.width;\r\n            //     const maxY = height - this.cropper.height;\r\n            //     let currentX = x - oX,\r\n            //     currentY = y - oY;\r\n            //     // 判断边界\r\n            //     this.cropper.x = this.limit(currentX, 0, maxX)\r\n            //     this.cropper.y = this.limit(currentY, 0, maxY)\r\n            //     this.draw()\r\n            // },\r\n            getCoordinateByEvent(e){\r\n                const rect = e.target.getBoundingClientRect(),\r\n                touch = e.touches[0],\r\n                { width, height } = this.options,\r\n                coordinate = {\r\n                    x: this.limit(touch.clientX - rect.left, 2, width - 2) ,\r\n                    y: this.limit(touch.clientY - rect.top, 2, height - 2) ,\r\n                }\r\n                // move 到边\r\n                return coordinate\r\n            },\r\n            // https://blog.csdn.net/qq_42014697/article/details/80728463  两指缩放\r\n            handleEnd(){\r\n                if (this.changeDrawAction) {\r\n                    if (this.drawAction) {\r\n                        this.drawAction = false\r\n                        this.bgOpacity = 0\r\n                        this.draw()\r\n                    } else {\r\n                        this.drawAction = true\r\n                        this.bgOpacity = .4\r\n                        this.draw()\r\n                    }\r\n                    this.changeDrawAction = false\r\n                    return\r\n                }\r\n                if (this.drawAction && this.pointLine.length > 0) {\r\n                    this.drawPoint.x = this.drawPoint.x - this.image.x\r\n                    this.drawPoint.y = this.drawPoint.y - this.image.y\r\n                    this.pointLine.push(this.drawPoint)\r\n                    // 点的 宽度\r\n                    const pointObj = {\r\n                        pointLine: this.pointLine,\r\n                        scale: this.scale,\r\n                        lineWidth: 3,\r\n                        color: this.color || this.averageColor,\r\n                        rotateAngle : this.rotateAngle\r\n                    }\r\n                    this.pointList.push(pointObj)\r\n                    this.pointLine = []\r\n                }\r\n                \r\n            },\r\n            handleStart(e) {\r\n                // alert(1)\r\n                e.preventDefault()\r\n                // 双指\r\n                if (e.touches.length > 1) {\r\n                    this.startTouches = e.touches\r\n                    this.startPoint.type = null\r\n                    return;\r\n                }\r\n                // 单指  起点\r\n                this.drawPoint = this.getCoordinateByEvent(e)\r\n                this.startPoint = this.getPointByCoordinate(this.drawPoint)\r\n                // --  画画\r\n                if (this.drawAction) {\r\n                    this.pointLine = []\r\n                    this.ctx.beginPath()\r\n                    this.ctx.moveTo(this.drawPoint.x, this.drawPoint.y)\r\n                }\r\n            },\r\n            handleMove (e) {\r\n                e.preventDefault()\r\n                const touches = e.touches\r\n                const image = this.image\r\n                if (touches.length > 1 && !this.drawAction) {\r\n                    let startTouches = this.startTouches\r\n                    let k; // 最终的缩放系数\r\n                    const scale = this.scale;\r\n                    // const offset = e.deltaY / 800;\r\n                    k = (this.getDistance(touches[0], touches[1]) / this.getDistance(startTouches[0], startTouches[1]))\r\n                    // k = k < 1 ? k / 10 : k * 10\r\n                    k = k < 1 ? 1 / (1 + k / 80) : 1 + Math.abs(k) / 160\r\n                    k = k * scale;\r\n                    this.scale = this.limit(k, 0.02, 1.07)\r\n                    const width = image.clientWidth * this.scale,\r\n                    height = image.clientHeight * this.scale\r\n                    this.image.x += (image.width - width) / 2\r\n                    this.image.y += (image.height - height) / 2\r\n                    this.image.width = width\r\n                    this.image.height = height\r\n                    this.draw()\r\n                    return\r\n                }\r\n                if (this.drawAction) {\r\n                    // 划线\r\n                    // 先实现划线\r\n                    //  画 相对于 画布  // 存 相对于 画布\r\n                    // 屡一下   -- 这个东西  想对于画布  在图片在哪里 ===== 根据图片的位置还原 画布位置\r\n                    const drawPoint = this.drawPoint\r\n                    const current = this.getCoordinateByEvent(e)\r\n                    const ctx = this.ctx\r\n                    const color =  this.color || this.averageColor\r\n                    ctx.lineTo(current.x, current.y)\r\n                    ctx.lineWidth = 3\r\n                    ctx.strokeStyle = color\r\n                    ctx.lineCap = 'round'\r\n                    ctx.stroke()\r\n                    drawPoint.x = drawPoint.x - image.x\r\n                    drawPoint.y = drawPoint.y - image.y\r\n                    this.pointLine.push(drawPoint)\r\n                    this.drawPoint = current\r\n                    return\r\n                }\r\n                // 这是干啥的--画=>图片和 线\r\n                const type = this.startPoint ? this.startPoint.type : null\r\n                if (type && this.getCoordinateByEvent(e)) {\r\n                    this[type](this.getCoordinateByEvent(e))\r\n                }\r\n            },\r\n            checkRegion(x,y,target) {\r\n                return x > target.x &&\r\n                    x < target.x + target.width &&\r\n                    y > target.y &&\r\n                    y < target.y + target.height\r\n            },\r\n            checkArc(x, y) {\r\n                const ctx  = this.ctx\r\n                ctx.beginPath()\r\n                // ctx.strokeStyle = 'red'//'transparent'\r\n                ctx.lineWidth = this.nookSide / 0.7\r\n                ctx.arc(this.arc.x, this.arc.y, this.arc.r + ctx.lineWidth , 0, Math.PI * 2)\r\n                // ctx.stroke() \r\n                return (ctx.isPointInPath(x * this.pixelRatio, y * this.pixelRatio)\r\n                 && this.getDistance({pageX: x, pageY: y}, {pageX: this.arc.x, pageY: this.arc.y}) >  this.arc.r - ctx.lineWidth / 2)\r\n            },\r\n            getPointByCoordinate({x, y}) {\r\n                const image = this.image,\r\n                shape = this.shape || 'rect'\r\n                let t = {}\r\n                let index = 0\r\n                //  旋转\r\n                if ( this.paintBrush && this.checkRegion(x, y, this.paintBrush)) {\r\n                    this.changeDrawAction = true\r\n                    return\r\n                }else if (this.revokeBar && this.checkRegion(x, y, this.revokeBar)) {\r\n                    // t.type = 'draw'\r\n                    // 接下来 是draw 动作\r\n                    //  再次进来  保存 起始点 坐标\r\n                    this.pointList.pop()\r\n                    this.draw()\r\n                    return\r\n                } else if (this.touchBar && this.checkRegion(x, y, this.touchBar)) {\r\n                    // 旋转后的角度 每次\r\n                    this.rotateAngle =  (this.rotateAngle + this.angle ) % 360\r\n                    this.draw()\r\n                    return\r\n                } else if(this.drawAction){\r\n                    return\r\n                } else if (shape === 'arc' && this.checkArc(x, y)) {\r\n                    t.type = 'handleArcMove'\r\n                }\r\n                // 四个角移动         \r\n                else if (shape !== 'arc' && this.points.some((point,i) => {\r\n                    index = i\r\n                    return this.checkRegion(x,y,point)\r\n                })\r\n                ) {\r\n                    t.type = 'handlePointMove'\r\n                    this.index = index\r\n                }\r\n                // 四根线移动\r\n                else if (shape === 'rect' && this.lines.some((line,i) => {\r\n                    index = i\r\n                    return this.checkRegion(x,y,line)\r\n                }) \r\n                ) {\r\n                    t.type = 'handleLineMove'\r\n                    this.index = index\r\n                }\r\n                // else if (\r\n                // cropper &&\r\n                // x > cropper.x &&\r\n                // x < cropper.x + cropper.width &&\r\n                // y > cropper.y &&\r\n                // y < cropper.y + cropper.height\r\n                // ) {\r\n                // t.offsetX = x - cropper.x;\r\n                // t.offsetY = y - cropper.y;\r\n                // t.type = 'handleCropperMove'\r\n                // }\r\n                // 图片移动\r\n                else if (this.checkRegion(x,y,image)) {\r\n                    t.offsetX = x - image.x\r\n                    t.offsetY = y - image.y\r\n                    t.type = 'handleImageMove' \r\n                }\r\n                return t\r\n            },\r\n            // 求两点之间的 距离\r\n            getDistance(p1, p2) {\r\n                const x = p2.pageX - p1.pageX,\r\n                    y = p2.pageY - p1.pageY\r\n                return Math.sqrt((x * x) + (y * y))\r\n            },\r\n            limit(value, min, max) {\r\n                if (value < min) {\r\n                    return min\r\n                }\r\n                if (value > max) {\r\n                    return max\r\n                }\r\n                return value\r\n            },\r\n            getImage(type='Base64', mimeType='image/jpeg', quality=1) {\r\n                if (this.noImage) return\r\n                const shape = this.shape || 'rect'\r\n                let cropper = this.cropper\r\n                if (shape == 'imgage') {\r\n                    cropper = this.image\r\n                } else if (shape === 'arc') {\r\n                    // 圆形必须 2倍才好\r\n                    cropper = {\r\n                        x: this.arc.x - this.arc.r,\r\n                        y: this.arc.y - this.arc.r,\r\n                        width:  this.arc.r * 2,\r\n                        height:  this.arc.r * 2\r\n                    }\r\n                }\r\n                const image = this.image,\r\n                pixelRatio = this.pixelRatio,\r\n                types = {\r\n                    Base64(canvas, mimeType, resolve) {\r\n                        resolve(canvas.toDataURL(mimeType))\r\n                    },\r\n                    Blob(canvas, mimeType, resolve){\r\n                        canvas.toBlob((blob)=> {\r\n                            resolve(blob)\r\n                        }, mimeType)\r\n                    } \r\n                },\r\n                w = cropper.width * quality ,\r\n                h = cropper.height * quality,\r\n                // 变量申请\r\n                canvasDom =  document.createElement('canvas'),\r\n                cCtx = canvasDom.getContext('2d')\r\n                // if (!this.canvas) {\r\n                //     this.canvas = document.createElement('canvas')\r\n                //     this.cCtx = this.canvas.getContext('2d')\r\n                    // const { mountNode } = this.$refs\r\n                    // mountNode.appendChild(this.canvas)\r\n                // }\r\n                // const cCtx = this.cCtx\r\n                canvasDom.width = w * pixelRatio\r\n                canvasDom.height = h * pixelRatio\r\n                cCtx.scale(pixelRatio, pixelRatio)\r\n                cCtx.clearRect(0, 0, w, h)\r\n                const rotateAngle = this.rotateAngle\r\n                if (shape === 'arc') {\r\n                    const radius = w / 2\r\n                    cCtx.beginPath()\r\n                    // 圆心是当前正方形的(画布) 中间\r\n                    cCtx.arc(radius , radius, radius, 0, Math.PI * 2, false)\r\n                    cCtx.clip()\r\n                }\r\n                //  圆形 只有 2 倍 缩放 数据是正确的\r\n                // 旋转图片  这个是  主图旋转  /也是canvas 上 img\r\n                this.canvasRotate('img', cCtx, image.element,\r\n                    rotateAngle,\r\n                    (image.x - cropper.x)  * quality,\r\n                    (image.y - cropper.y)  * quality,\r\n                    image.width * quality,\r\n                    image.height * quality\r\n                )\r\n                // 在整个图片上 写写画画  再要框了--- 就是说框是---img\r\n                this.drawPointFn(cCtx, quality, cropper)\r\n                return new Promise((resolve, reject) => {\r\n                    if(!types[type]) {\r\n                        reject('type = Blob || Base64')\r\n                        return  \r\n                    }\r\n                    const [left = '50%', top = '50%', size = 1, angle = 0] = this.position\r\n                    if (this.imageWatermark) {\r\n                        let watermarkImg = new Image()\r\n                        watermarkImg.src = this.getFileSrc(this.imageWatermark)\r\n                        watermarkImg.crossOrigin = 'anonymous'\r\n                        watermarkImg.onload = () => { // 等到图片加载进来之后\r\n                            const width = watermarkImg.width * size * quality / 100,\r\n                            height = watermarkImg.height * size * quality / 100,\r\n                            imgX  = ( w - width ) * parseInt(left) / 100 ,\r\n                            imgY =  (h - height) * parseInt(top) / 100\r\n                            this.canvasRotate('img', cCtx, watermarkImg, angle, imgX, imgY, width, height)\r\n                            types[type](canvasDom, mimeType, resolve)\r\n                        }\r\n                        return\r\n                    }             \r\n                    if (this.textWatermark) {\r\n                        const height = this.limit(size, 12, 100)\r\n                        cCtx.font = height + 'px Georgia'\r\n                        const text = this.textWatermark,\r\n                        width = cCtx.measureText(text).width,\r\n                        textX = (w - width * 1.031 )  * parseInt(left) / 100,\r\n                        textY = (h + height * 0.72)  * parseInt(top) / 100\r\n                        // 变量申请\r\n                        cCtx.fillStyle = this.color || this.averageColor\r\n                        // console.log(this.cCtx.fillStyle)\r\n                        if(cCtx.fillStyle === '#ffffff') {\r\n                            cCtx.fillStyle = '#000'\r\n                        }\r\n                        this.canvasRotate('text', cCtx, text, angle, textX, textY, width, height)\r\n                        types[type](canvasDom, mimeType, resolve)\r\n                        return\r\n                    }\r\n                    types[type](canvasDom, mimeType, resolve)\r\n                })\r\n            },\r\n            canvasRotate(type, ctx, target, angle, x, y, width,height) {\r\n                ctx.save()\r\n                const halfHeight = height / 2,\r\n                halfWidth = width / 2\r\n                ctx.translate(x + halfWidth, y + halfHeight)\r\n                ctx.rotate(Math.PI / 180 * angle)\r\n                if (type === 'img') {\r\n                    ctx.drawImage(\r\n                        target,\r\n                        -halfWidth,\r\n                        -halfHeight,\r\n                        width,\r\n                        height\r\n                    )\r\n                } else if (type === 'text') {\r\n                    ctx.fillText(target, -halfWidth , -halfHeight)\r\n                }\r\n                ctx.restore()\r\n            },\r\n            changeImage(imgAddress) {\r\n                if (this.noImage) return\r\n                this.averageColor = null\r\n                if (imgAddress) {\r\n                    this.createImage(imgAddress)\r\n                    return\r\n                }\r\n                this.inputHandle()\r\n            },\r\n            // 工具\r\n            getPixelRatio(context) {\r\n                const backingStore = context.backingStorePixelRatio ||\r\n                context.webkitBackingStorePixelRatio ||\r\n                context.mozBackingStorePixelRatio ||\r\n                context.msBackingStorePixelRatio ||\r\n                context.oBackingStorePixelRatio ||\r\n                context.backingStorePixelRatio || 1\r\n                return (window.devicePixelRatio || 1) / backingStore\r\n            },\r\n        //    isWeiXin() {\r\n        //         const ua = window.navigator.userAgent.toLowerCase();\r\n        //         if (ua.match(/MicroMessenger/i) == 'micromessenger') {\r\n        //             return true\r\n        //         } else {\r\n        //             return false\r\n        //         }\r\n        //     },\r\n            uploadImg(e) {\r\n                this.createImage(e.target.files[0])\r\n                this.noImage = false\r\n            },\r\n            getFileSrc(src) {\r\n                if (Object.prototype.toString.call(src) === '[object File]') {\r\n                   src = window.URL.createObjectURL(src)\r\n                }\r\n                return src\r\n            },\r\n            createImage(imgfile) {\r\n                let img = new Image()\r\n                //  url , imgsrc, 文件  三种情况\r\n                img.crossOrigin = 'anonymous'\r\n                img.src = this.getFileSrc(imgfile)\r\n                img.onload = () => { // 等到图片加载进来之后\r\n                    getImageDirection(img).then(res => {\r\n                        if (res === 1) {\r\n                            this.init(img)\r\n                            this.$emit('imgLoaded')\r\n                            return \r\n                        }\r\n                        //  只有钉钉  会莫名其妙 卡顿- =>   把图片 画在canvas 背景上了\r\n                        this.init(img)\r\n                        this.init(correctImage(img, res))\r\n                        this.$emit('imgLoaded')\r\n                       \r\n                    }).catch( err =>{\r\n                        // eslint-disable-next-line\r\n                        console.error(err)\r\n                    })\r\n                }\r\n            },\r\n            inputHandle() {\r\n                document.getElementById('file-input').click()\r\n            },\r\n            getImageColor(data) { \r\n                let r=0, g=0, b=0\r\n                // 取所有像素的平均值\r\n                const num = this.limit(data.length, 1, 20)\r\n                for (let row = 0; row < num; row++) {\r\n                    for (let col = 0; col < num; col++) {\r\n                        r += data[((num * row) + col) * 4]\r\n                        g += data[((num * row) + col) * 4 + 1]\r\n                        b += data[((num * row) + col) * 4 + 2]\r\n                    }\r\n                }\r\n                // 求取平均值\r\n                r /= (num * num)\r\n                g /= (num * num)\r\n                b /= (num * num)\r\n                // 将最终的值取整\r\n                r = Math.round(r)\r\n                g = Math.round(g)\r\n                b = Math.round(b)\r\n                return `rgba(${255 - r}, ${255 - g}, ${255 - b}, 1)`\r\n            }\r\n        },\r\n        mounted() {\r\n            // 解决 字体模糊\r\n            const { mountNode } = this.$refs\r\n            const { clientWidth, clientHeight } = mountNode\r\n            // p可以优化\r\n            this.options = {\r\n                width: clientWidth,\r\n                height: clientHeight\r\n            }\r\n            // canvas dom\r\n            let canvasDom =  document.createElement('canvas')\r\n            canvasDom.style.width =  clientWidth + 'px'\r\n            canvasDom.style.height = clientHeight + 'px'\r\n            //  小方格背景\r\n            canvasDom.style.backgroundColor = '#fff'\r\n            canvasDom.style.backgroundImage =  'linear-gradient(45deg, #ccc 25%, transparent 25%, transparent 75%, #ccc 75%), linear-gradient(45deg, #ccc 25%, transparent 25%, transparent 75%, #ccc 75%)'\r\n            canvasDom.style.backgroundSize = '29px 29px'\r\n            canvasDom.style.backgroundPosition = '0 0, 15px 15px'\r\n            mountNode.appendChild(canvasDom)\r\n            // this.options = canvasDom.getBoundingClientRect()\r\n           \r\n\r\n            this.ctx = canvasDom.getContext('2d')\r\n            const pixelRatio = this.pixelRatio = this.getPixelRatio(this.ctx)\r\n            canvasDom.width = clientWidth * pixelRatio\r\n            canvasDom.height = clientHeight * pixelRatio\r\n            this.ctx.scale(pixelRatio, pixelRatio)\r\n            // console.log(this.$slots.initial[0].data.attrs.src)\r\n            if (this.defaultImgUrl || this.$slots.defaultImgUrl) {\r\n                const src = this.defaultImgUrl ? this.defaultImgUrl : this.$slots.defaultImgUrl[0].data.attrs.src\r\n                this.createImage(src)\r\n                this.noImage = false\r\n            }\r\n            this.$emit('input', {\r\n                getImage: this.getImage,\r\n                changeImage: this.changeImage\r\n            })           \r\n        }\r\n    }\r\n</script>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./cropblg.vue?vue&type=script&lang=js&\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","import { render, staticRenderFns } from \"./cropblg.vue?vue&type=template&id=5aff7163&\"\nimport script from \"./cropblg.vue?vue&type=script&lang=js&\"\nexport * from \"./cropblg.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\r\nimport crop from './cropblg.vue';\r\n\r\n// const components = [progresschart];\r\n\r\n// 定义 install 方法\r\nconst install = function (Vue) {\r\n    if (install.installed) return\r\n    install.installed = true\r\n    // 遍历并注册全局组件\r\n    // components.map(component => {\r\n        Vue.component(crop.name, crop)\r\n    // })\r\n}\r\n\r\n//  全局引用可自动安装\r\nif (typeof window !== 'undefined' && window.Vue) {\r\n    install(window.Vue);\r\n}\r\nexport default {\r\n    install,\r\n    crop\r\n};\r\nexport { crop };","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}